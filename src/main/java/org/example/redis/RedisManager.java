package org.example.redis;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

import java.time.Duration;

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏.
 * 
 * –ü–†–û–ë–õ–ï–ú–ê –ö–û–¢–û–†–£–Æ –†–ï–®–ê–ï–ú:
 * - –°–µ—Å—Å–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ø–∞–º—è—Ç–∏ (ConcurrentHashMap)
 * - –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Ä—è–ª–∏—Å—å
 * - –ù–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
 * 
 * –†–ï–®–ï–ù–ò–ï:
 * - Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
 * - Connection pool –¥–ª—è Redis
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
 */
public class RedisManager {
    
    private static volatile RedisManager instance;
    private static volatile JedisPool jedisPool;
    private static final Object lock = new Object();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis connection pool
    private static final String REDIS_HOST = "localhost";
    private static final int REDIS_PORT = 6379;
    private static final int MAX_TOTAL = 20;           // –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    private static final int MAX_IDLE = 10;            // –ú–∞–∫—Å–∏–º—É–º idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    private static final int MIN_IDLE = 5;              // –ú–∏–Ω–∏–º—É–º idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    private static final Duration MAX_WAIT = Duration.ofSeconds(30); // –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TTL –¥–ª—è —Å–µ—Å—Å–∏–π
    private static final int SESSION_TTL_SECONDS = 24 * 60 * 60; // 24 —á–∞—Å–∞
    private static final int CACHE_TTL_SECONDS = 60 * 60;        // 1 —á–∞—Å –¥–ª—è –∫—ç—à–∞
    
    private RedisManager() {
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è Singleton
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ RedisManager
     */
    public static RedisManager getInstance() {
        if (instance == null) {
            synchronized (lock) {
                if (instance == null) {
                    instance = new RedisManager();
                }
            }
        }
        return instance;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ JedisPool —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
     */
    public JedisPool getJedisPool() {
        if (jedisPool == null) {
            synchronized (lock) {
                if (jedisPool == null) {
                    jedisPool = createJedisPool();
                }
            }
        }
        return jedisPool;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ JedisPool —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
     */
    private JedisPool createJedisPool() {
        try {
            JedisPoolConfig poolConfig = new JedisPoolConfig();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ connection pool
            poolConfig.setMaxTotal(MAX_TOTAL);
            poolConfig.setMaxIdle(MAX_IDLE);
            poolConfig.setMinIdle(MIN_IDLE);
            poolConfig.setMaxWaitMillis(MAX_WAIT.toMillis());
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            poolConfig.setTestOnBorrow(true);
            poolConfig.setTestOnReturn(true);
            poolConfig.setTestWhileIdle(true);
            poolConfig.setTimeBetweenEvictionRunsMillis(30000);
            poolConfig.setNumTestsPerEvictionRun(3);
            poolConfig.setMinEvictableIdleTimeMillis(60000);
            
            jedisPool = new JedisPool(poolConfig, REDIS_HOST, REDIS_PORT);
            
            // Silent initialization
            
            // Test connection silently
            try (Jedis jedis = jedisPool.getResource()) {
                jedis.ping();
            }
            
            return jedisPool;
            
        } catch (Exception ex) {
            // Silent fallback - system will work without Redis
            return null;
        }
    }
    
    /**
     * Get Jedis resource from pool
     */
    public Jedis getResource() {
        JedisPool pool = getJedisPool();
        if (pool == null) {
            throw new RuntimeException("Redis unavailable");
        }
        return pool.getResource();
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ Redis —Å TTL
     */
    public void setSession(String key, String value) {
        try (Jedis jedis = getResource()) {
            jedis.setex(key, SESSION_TTL_SECONDS, value);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Redis
     */
    public String getSession(String key) {
        try (Jedis jedis = getResource()) {
            return jedis.get(key);
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Redis
     */
    public void deleteSession(String key) {
        try (Jedis jedis = getResource()) {
            jedis.del(key);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
     */
    public boolean existsSession(String key) {
        try (Jedis jedis = getResource()) {
            return jedis.exists(key);
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TTL –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
     */
    public void expireSession(String key, int seconds) {
        try (Jedis jedis = getResource()) {
            jedis.expire(key, seconds);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ TTL –∫–ª—é—á–∞
     */
    public long getSessionTTL(String key) {
        try (Jedis jedis = getResource()) {
            return jedis.ttl(key);
        }
    }
    
    /**
     * Graceful shutdown of JedisPool
     */
    public void shutdown() {
        if (jedisPool != null && !jedisPool.isClosed()) {
            System.out.println("üîÑ Closing Redis connection pool...");
            jedisPool.close();
            jedisPool = null;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    public boolean isHealthy() {
        try {
            JedisPool pool = getJedisPool();
            if (pool == null) {
                return false;
            }
            try (Jedis jedis = pool.getResource()) {
                String pong = jedis.ping();
                return "PONG".equals(pong);
            }
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * Get Redis statistics
     */
    public String getRedisStats() {
        try {
            JedisPool pool = getJedisPool();
            if (pool == null) {
                return "Redis unavailable - using memory fallback";
            }
            return String.format("Redis Pool: active=%d, idle=%d, healthy=%s", 
                pool.getNumActive(), pool.getNumIdle(), isHealthy());
        } catch (Exception e) {
            return "Redis stats error: " + e.getMessage();
        }
    }
}
