package org.example.service;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
 * –¢–µ–ø–µ—Ä—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π - —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */
public class ReservationCleanupService {
    
    private static ScheduledExecutorService scheduler;
    
    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏
     */
    public static void start() {
        if (scheduler != null && !scheduler.isShutdown()) {
            return; // –£–∂–µ –∑–∞–ø—É—â–µ–Ω
        }
        
        scheduler = Executors.newScheduledThreadPool(1);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        scheduler.scheduleAtFixedRate(() -> {
            try {
                // –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
                System.out.println("üîÑ Reservation cleanup service is running...");
            } catch (Exception e) {
                System.err.println("‚ùå Error in reservation cleanup service: " + e.getMessage());
            }
        }, 0, 5, TimeUnit.MINUTES);
        
        System.out.println("‚úÖ Reservation cleanup service started");
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏
     */
    public static void stop() {
        if (scheduler != null && !scheduler.isShutdown()) {
            scheduler.shutdown();
            try {
                if (!scheduler.awaitTermination(10, TimeUnit.SECONDS)) {
                    scheduler.shutdownNow();
                }
            } catch (InterruptedException e) {
                scheduler.shutdownNow();
                Thread.currentThread().interrupt();
            }
            System.out.println("üõë Reservation cleanup service stopped");
        }
    }
}