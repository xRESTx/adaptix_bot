package org.example.database;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
 * 
 * –ü–†–û–ë–õ–ï–ú–ê –ö–û–¢–û–†–£–Æ –†–ï–®–ê–ï–ú:
 * - –ö–∞–∂–¥—ã–π DAO —Å–æ–∑–¥–∞–≤–∞–ª —Å–≤–æ—é SessionFactory
 * - –ü—Ä–∏ 200+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ –∫ —É—Ç–µ—á–∫–∞–º –ø–∞–º—è—Ç–∏
 * - –ò—Å—á–µ—Ä–ø–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL
 * 
 * –†–ï–®–ï–ù–ò–ï:
 * - –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è SessionFactory –Ω–∞ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π connection pool
 * - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
 */
public class DatabaseManager {
    
    private static volatile DatabaseManager instance;
    private static volatile SessionFactory sessionFactory;
    private static final Object lock = new Object();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è 200+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private static final int MAX_POOL_SIZE = 20;        // –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    private static final int MIN_POOL_SIZE = 5;          // –ú–∏–Ω–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    private static final int CONNECTION_TIMEOUT = 30000; // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    private static final int IDLE_TIMEOUT = 600000;      // 10 –º–∏–Ω—É—Ç idle timeout
    
    private DatabaseManager() {
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è Singleton
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ DatabaseManager
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç double-checked locking –¥–ª—è thread-safety
     */
    public static DatabaseManager getInstance() {
        if (instance == null) {
            synchronized (lock) {
                if (instance == null) {
                    instance = new DatabaseManager();
                }
            }
        }
        return instance;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ SessionFactory —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ connection pool
     * –°–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
     */
    public SessionFactory getSessionFactory() {
        if (sessionFactory == null) {
            synchronized (lock) {
                if (sessionFactory == null) {
                    sessionFactory = createSessionFactory();
                }
            }
        }
        return sessionFactory;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ SessionFactory —Å HikariCP connection pool
     * HikariCP - —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π connection pool –¥–ª—è Java
     */
    private SessionFactory createSessionFactory() {
        try {
            Configuration config = new Configuration().configure();
            
            // HikariCP —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ hibernate.cfg.xml
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            
            System.out.println("üöÄ Initializing HikariCP connection pool...");
            System.out.println("üìä Pool settings: max=" + MAX_POOL_SIZE + ", min=" + MIN_POOL_SIZE);
            
            return config.buildSessionFactory();
            
        } catch (Throwable ex) {
            System.err.println("‚ùå Critical SessionFactory creation error: " + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }
    
    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ SessionFactory –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    public void shutdown() {
        if (sessionFactory != null && !sessionFactory.isClosed()) {
            System.out.println("üîÑ Closing SessionFactory...");
            sessionFactory.close();
            sessionFactory = null;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    public boolean isHealthy() {
        try {
            return sessionFactory != null && !sessionFactory.isClosed();
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    public String getConnectionPoolStats() {
        if (sessionFactory == null) {
            return "SessionFactory –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞";
        }
        
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            return String.format("Connection Pool: max=%d, min=%d, healthy=%s", 
                MAX_POOL_SIZE, MIN_POOL_SIZE, isHealthy());
        } catch (Exception e) {
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage();
        }
    }
}
