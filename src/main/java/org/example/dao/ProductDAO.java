package org.example.dao;

import org.example.database.DatabaseManager;
import org.example.table.Product;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.hibernate.LockOptions;

import java.util.List;

public class ProductDAO {

    private final SessionFactory sessionFactory;

    public ProductDAO() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π DatabaseManager
        this.sessionFactory = DatabaseManager.getInstance().getSessionFactory();
    }

    public void save(Product product) {
        executeInsideTransaction(session -> session.persist(product));
    }

    public void update(Product product) {
        executeInsideTransaction(session -> session.merge(product));
    }

    public Product findById(int id) {
        try (Session session = sessionFactory.openSession()) {
            return session.get(Product.class, id);
        }
    }

    public List<Product> findAll() {
        try (Session session = sessionFactory.openSession()) {
            List<Product> products = session.createQuery("FROM Product", Product.class).list();
            System.out.println("üîç findAll: Found " + products.size() + " total products in database");
            // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ - —ç—Ç–æ –∑–∞–º–µ–¥–ª—è–µ—Ç —Ä–∞–±–æ—Ç—É
            return products;
        }
    }
    public List<Product> findAllVisible() {
        try (Session session = sessionFactory.openSession()) {
            return session.createQuery("FROM Product where visible = true", Product.class).list();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
     * (–≤–∏–¥–∏–º—ã–µ –∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ –≤ –∞–∫—Ü–∏–∏)
     */
    public List<Product> findAllAvailableForUsers() {
        try (Session session = sessionFactory.openSession()) {
            List<Product> products = session.createQuery(
                "FROM Product WHERE visible = true AND numberOfParticipants < numberParticipants", 
                Product.class
            ).list();
            
            System.out.println("üîç findAllAvailableForUsers: Found " + products.size() + " available products");
            // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ - —ç—Ç–æ –∑–∞–º–µ–¥–ª—è–µ—Ç —Ä–∞–±–æ—Ç—É
            return products;
        }
    }

    public void deleteById(int id) {
        executeInsideTransaction(session -> {
            Product product = session.get(Product.class, id);
            if (product != null) {
                session.remove(product);
            }
        });
    }

    public Product findFirst() {
        try (Session session = sessionFactory.openSession()) {
            return session.createQuery("FROM Product", Product.class)
                    .setMaxResults(1)
                    .uniqueResult();
        }
    }
    public void updateVisibleById(int id, boolean visible) {
        try (Session session = sessionFactory.openSession()) {
            Transaction tx = session.beginTransaction();
            Query<?> query = session.createQuery("update Product set visible = :visible where idProduct = :idProduct");
            query.setParameter("visible", visible);
            query.setParameter("idProduct", id);
            query.executeUpdate();
            tx.commit();
        }
    }

    /**
     * –ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: –∞—Ç–æ–º–∞—Ä–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ.
     */
    public boolean incrementParticipantsIfAvailablePessimistic(int productId) {
        try (Session session = sessionFactory.openSession()) {
            Transaction tx = session.beginTransaction();
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –Ω–∞ –∑–∞–ø–∏—Å—å
                Product product = session.get(Product.class, productId, LockOptions.UPGRADE);
                if (product == null) {
                    tx.rollback();
                    return false;
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                if (product.getNumberOfParticipants() < product.getNumberParticipants()) {
                    product.setNumberOfParticipants(product.getNumberOfParticipants() + 1);
                    session.merge(product);
                    tx.commit();
                    return true;
                } else {
                    tx.rollback();
                    return false;
                }
            } catch (RuntimeException e) {
                tx.rollback();
                throw e;
            }
        }
    }

    // –£–¥–∞–ª—è–µ–º –º–µ—Ç–æ–¥ close() - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –≤ DatabaseManager

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    private void executeInsideTransaction(SessionAction action) {
        try (Session session = sessionFactory.openSession()) {
            Transaction tx = session.beginTransaction();
            try {
                action.execute(session);
                tx.commit();
            } catch (RuntimeException e) {
                tx.rollback();
                throw e;
            }
        }
    }

    @FunctionalInterface
    private interface SessionAction {
        void execute(Session session);
    }
}
