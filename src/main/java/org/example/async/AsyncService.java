package org.example.async;

import org.example.dao.PhotoDAO;
import org.example.dao.PurchaseDAO;
import org.example.session.ReviewRequestSession;
import org.example.table.Photo;
import org.example.table.Purchase;
import org.example.table.User;
import org.example.telegramBots.TelegramBot;
import org.example.tgProcessing.Sent;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
 * 
 * –ü–†–û–ë–õ–ï–ú–ê –ö–û–¢–û–†–£–Æ –†–ï–®–ê–ï–ú:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–º–µ–¥–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞
 * - –ù–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 * 
 * –†–ï–®–ï–ù–ò–ï:
 * - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * - –û—Ç–¥–µ–ª—å–Ω—ã–π thread pool –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * - –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
public class AsyncService {
    
    // –û—Ç–¥–µ–ª—å–Ω—ã–π thread pool –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    private static final ExecutorService fileProcessingExecutor = 
        Executors.newFixedThreadPool(10, r -> {
            Thread t = new Thread(r, "FileProcessing-" + System.currentTimeMillis());
            t.setDaemon(true);
            return t;
        });
    
    // Thread pool –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
    private static final ExecutorService photoProcessingExecutor = 
        Executors.newFixedThreadPool(5, r -> {
            Thread t = new Thread(r, "PhotoProcessing-" + System.currentTimeMillis());
            t.setDaemon(true);
            return t;
        });
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑–∞–∫–∞–∑–∞
     */
    public static CompletableFuture<Void> processScreenshotAsync(
            ReviewRequestSession session, 
            User user, 
            PhotoSize photo, 
            String fileId,
            Long groupMessageId) {
        
        return CompletableFuture.runAsync(() -> {
            try {
                System.out.println("üîÑ Async screenshot processing for user: " + user.getIdUser());
                
                TelegramBot telegramBot = new TelegramBot();
                
                // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                File reviewsDir = new File("reviews/");
                if (!reviewsDir.exists()) {
                    reviewsDir.mkdirs();
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                String fileName = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date()) + ".jpg";
                Path filePath = Paths.get("reviews/", fileName);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                telegramBot.downloadFile(fileId, filePath.toString());
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
                Purchase purchase = new Purchase();
                purchase.setProduct(session.getProduct());
                purchase.setUser(user);
                purchase.setDate(LocalDate.now());
                purchase.setPurchaseStage(0);
                purchase.setGroupMessageId(groupMessageId);
                
                PurchaseDAO purchaseDAO = new PurchaseDAO();
                purchaseDAO.save(purchase);
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ
                Photo photoEntity = new Photo();
                photoEntity.setPurchase(purchase);
                photoEntity.setUser(user);
                photoEntity.setIdPhoto(fileName);
                
                PhotoDAO photoDAO = new PhotoDAO();
                photoDAO.save(photoEntity);
                
                System.out.println("‚úÖ Screenshot processed successfully: " + fileName);
                
            } catch (TelegramApiException | IOException e) {
                System.err.println("‚ùå Screenshot processing error: " + e.getMessage());
                e.printStackTrace();
            }
        }, fileProcessingExecutor);
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
     */
    public static CompletableFuture<String> processProductPhotoAsync(
            String photoId, 
            String productName) {
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                System.out.println("üîÑ Async product photo processing: " + productName);
                
                TelegramBot telegramBot = new TelegramBot();
                
                // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
                File uploadDir = new File("upload/");
                if (!uploadDir.exists()) {
                    uploadDir.mkdirs();
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
                String fileName = sdf.format(new Date()) + ".jpg";
                Path filePath = Paths.get("upload/", fileName);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                telegramBot.downloadFile(photoId, filePath.toString());
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
                File downloadedFile = filePath.toFile();
                if (downloadedFile.exists()) {
                    System.out.println("‚úÖ Product photo processed successfully: " + fileName);
                } else {
                    System.out.println("‚ùå Error: Downloaded file does not exist: " + filePath.toString());
                    return null;
                }
                
                return filePath.toString();
                
            } catch (TelegramApiException | IOException e) {
                System.err.println("‚ùå Product photo processing error: " + e.getMessage());
                e.printStackTrace();
                return null;
            }
        }, photoProcessingExecutor);
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    public static CompletableFuture<Void> sendNotificationAsync(
            String message, 
            String filePath) {
        
        return CompletableFuture.runAsync(() -> {
            try {
                System.out.println("üîÑ Async notification sending");
                
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É, email, webhook –∏ —Ç.–¥.
                
                System.out.println("‚úÖ Notification sent: " + message);
                
            } catch (Exception e) {
                System.err.println("‚ùå Notification sending error: " + e.getMessage());
                e.printStackTrace();
            }
        }, fileProcessingExecutor);
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    public static CompletableFuture<Void> cleanupTempFilesAsync() {
        return CompletableFuture.runAsync(() -> {
            try {
                System.out.println("üîÑ Async temp files cleanup");
                
                // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
                long cutoffTime = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000L);
                
                cleanupDirectory("upload/", cutoffTime);
                cleanupDirectory("reviews/", cutoffTime);
                
                System.out.println("‚úÖ Temp files cleaned up");
                
            } catch (Exception e) {
                System.err.println("‚ùå File cleanup error: " + e.getMessage());
                e.printStackTrace();
            }
        }, fileProcessingExecutor);
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    private static void cleanupDirectory(String directoryPath, long cutoffTime) {
        File directory = new File(directoryPath);
        if (!directory.exists() || !directory.isDirectory()) {
            return;
        }
        
        File[] files = directory.listFiles();
        if (files == null) {
            return;
        }
        
        int deletedCount = 0;
        for (File file : files) {
            if (file.isFile() && file.lastModified() < cutoffTime) {
                if (file.delete()) {
                    deletedCount++;
                }
            }
        }
        
        if (deletedCount > 0) {
            System.out.println("üóëÔ∏è Deleted " + deletedCount + " old files from " + directoryPath);
        }
    }
    
    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö thread pool'–æ–≤
     */
    public static void shutdown() {
        System.out.println("üîÑ Shutting down async services...");
        
        fileProcessingExecutor.shutdown();
        photoProcessingExecutor.shutdown();
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
        try {
            if (!fileProcessingExecutor.awaitTermination(30, java.util.concurrent.TimeUnit.SECONDS)) {
                fileProcessingExecutor.shutdownNow();
            }
            if (!photoProcessingExecutor.awaitTermination(30, java.util.concurrent.TimeUnit.SECONDS)) {
                photoProcessingExecutor.shutdownNow();
            }
        } catch (InterruptedException e) {
            fileProcessingExecutor.shutdownNow();
            photoProcessingExecutor.shutdownNow();
            Thread.currentThread().interrupt();
        }
        
        System.out.println("‚úÖ Async services shutdown completed");
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ thread pool'–æ–≤
     */
    public static String getThreadPoolStats() {
        return String.format("Thread Pools - File: active=%d, queue=%d, Photo: active=%d, queue=%d",
            fileProcessingExecutor.isShutdown() ? 0 : 1, // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            fileProcessingExecutor.isShutdown() ? 0 : 0,
            photoProcessingExecutor.isShutdown() ? 0 : 1,
            photoProcessingExecutor.isShutdown() ? 0 : 0
        );
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ–∏—Å–∫–∞
     */
    public static CompletableFuture<Void> processSearchScreenshotAsync(
            ReviewRequestSession session,
            User user,
            PhotoSize photo,
            String fileId) {

        return CompletableFuture.runAsync(() -> {
            try {
                System.out.println("üîÑ Async search screenshot processing for user: " + user.getIdUser());

                TelegramBot telegramBot = new TelegramBot();

                // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                File reviewsDir = new File("reviews/");
                if (!reviewsDir.exists()) {
                    reviewsDir.mkdirs();
                }

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                String fileName = "search_" + new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date()) + ".jpg";
                Path filePath = Paths.get("reviews/", fileName);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                telegramBot.downloadFile(fileId, filePath.toString());

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É –ø–æ–∏—Å–∫–∞
                session.setSearchScreenshotPath(filePath.toString());

                System.out.println("‚úÖ Search screenshot processed successfully: " + fileName);

            } catch (TelegramApiException | IOException e) {
                System.err.println("‚ùå Search screenshot processing error: " + e.getMessage());
                e.printStackTrace();
            }
        }, fileProcessingExecutor);
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
     */
    public static CompletableFuture<Void> processDeliveryScreenshotAsync(
            ReviewRequestSession session,
            User user,
            PhotoSize photo,
            String fileId) {

        return CompletableFuture.runAsync(() -> {
            try {
                System.out.println("üîÑ Async delivery screenshot processing for user: " + user.getIdUser());

                TelegramBot telegramBot = new TelegramBot();

                // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                File reviewsDir = new File("reviews/");
                if (!reviewsDir.exists()) {
                    reviewsDir.mkdirs();
                }

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                String fileName = "delivery_" + new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date()) + ".jpg";
                Path filePath = Paths.get("reviews/", fileName);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                telegramBot.downloadFile(fileId, filePath.toString());

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
                session.setDeliveryScreenshotPath(filePath.toString());

                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
                Purchase purchase = new Purchase();
                purchase.setProduct(session.getProduct());
                purchase.setUser(user);
                purchase.setDate(LocalDate.now());
                purchase.setOrderTime(java.time.LocalTime.now());
                purchase.setPurchaseStage(0);
                purchase.setGroupMessageId(session.getGroupMessageId());

                PurchaseDAO purchaseDAO = new PurchaseDAO();
                purchaseDAO.save(purchase);
                
                // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ MessageProcessing.java
                // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
                System.out.println("üîç Debug: session.getGroupMessageId() = " + session.getGroupMessageId());
                if (session.getGroupMessageId() != null) {
                    purchase.setOrderMessageId(session.getGroupMessageId());
                    purchaseDAO.update(purchase);
                    System.out.println("‚úÖ Order message ID saved: " + session.getGroupMessageId());
                } else {
                    System.out.println("‚ùå Group message ID is null in session!");
                }

                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ –ø–æ–∏—Å–∫–∞
                Photo searchPhoto = new Photo();
                searchPhoto.setPurchase(purchase);
                searchPhoto.setUser(user);
                searchPhoto.setIdPhoto("search_" + fileName);

                PhotoDAO photoDAO = new PhotoDAO();
                photoDAO.save(searchPhoto);

                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏
                Photo deliveryPhoto = new Photo();
                deliveryPhoto.setPurchase(purchase);
                deliveryPhoto.setUser(user);
                deliveryPhoto.setIdPhoto("delivery_" + fileName);

                photoDAO.save(deliveryPhoto);

                System.out.println("‚úÖ Delivery screenshot processed successfully: " + fileName);

            } catch (TelegramApiException | IOException e) {
                System.err.println("‚ùå Delivery screenshot processing error: " + e.getMessage());
                e.printStackTrace();
            }
        }, fileProcessingExecutor);
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞
     */
    public static CompletableFuture<String> processReviewPhotoAsync(
            String photoId, 
            Long userId, 
            int photoNumber) {
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                System.out.println("üîÑ Async review photo processing: user " + userId + ", photo " + photoNumber);
                
                TelegramBot telegramBot = new TelegramBot();
                
                // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
                File reviewsDir = new File("reviews/");
                if (!reviewsDir.exists()) {
                    reviewsDir.mkdirs();
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
                String fileName = "review_" + userId + "_" + photoNumber + "_" + sdf.format(new Date()) + ".jpg";
                Path filePath = Paths.get("reviews/", fileName);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                telegramBot.downloadFile(photoId, filePath.toString());
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
                File downloadedFile = filePath.toFile();
                if (downloadedFile.exists()) {
                    System.out.println("‚úÖ Review photo processed successfully: " + fileName);
                } else {
                    System.out.println("‚ùå Error: Downloaded file does not exist: " + filePath.toString());
                    return null;
                }
                
                return filePath.toString();
                
            } catch (TelegramApiException | IOException e) {
                System.err.println("‚ùå Review photo processing error: " + e.getMessage());
                e.printStackTrace();
                return null;
            }
        }, photoProcessingExecutor);
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–∑—ã–≤–∞
     */
    public static CompletableFuture<String> processReviewVideoAsync(
            String videoId, 
            Long userId) {
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                System.out.println("üîÑ Async review video processing: user " + userId);
                
                TelegramBot telegramBot = new TelegramBot();
                
                // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
                File reviewsDir = new File("reviews/");
                if (!reviewsDir.exists()) {
                    reviewsDir.mkdirs();
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
                String fileName = "review_" + userId + "_video_" + sdf.format(new Date()) + ".mp4";
                Path filePath = Paths.get("reviews/", fileName);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                telegramBot.downloadFile(videoId, filePath.toString());
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
                File downloadedFile = filePath.toFile();
                if (downloadedFile.exists()) {
                    System.out.println("‚úÖ Review video processed successfully: " + fileName);
                } else {
                    System.out.println("‚ùå Error: Downloaded file does not exist: " + filePath.toString());
                    return null;
                }
                
                return filePath.toString();
                
            } catch (TelegramApiException | IOException e) {
                System.err.println("‚ùå Review video processing error: " + e.getMessage());
                e.printStackTrace();
                return null;
            }
        }, photoProcessingExecutor);
    }
}
