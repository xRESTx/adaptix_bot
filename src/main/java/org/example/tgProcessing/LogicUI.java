package org.example.tgProcessing;

import org.example.dao.ProductDAO;
import org.example.dao.PurchaseDAO;
import org.example.dao.UserDAO;
import org.example.table.Product;
import org.example.table.Purchase;
import org.example.table.User;
import org.example.settings.AdminSettings;
import org.example.session.ReviewSubmissionSession;
import org.example.session.RedisSessionStore;
import org.example.session.ReservationService;
import org.example.telegramBots.TelegramBot;
import java.util.ResourceBundle;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.ArrayList;
import java.util.List;
import java.io.File;

public class LogicUI {

    public void sendStart(long chatId,Update update) {
        Sent sent = new Sent();
        TelegramBot telegramBot = new TelegramBot();
        UserDAO userDAO = new UserDAO();

        User user = userDAO.findById(chatId);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        if (user != null && user.isBlock()) {
            KeyboardRow onlySupport = new KeyboardRow();
            onlySupport.add("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞");
            keyboardMarkup.setKeyboard(List.of(onlySupport));
        } else {
            KeyboardRow row1 = new KeyboardRow();
            row1.add("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤");
            row1.add("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤");

            KeyboardRow row2 = new KeyboardRow();
            row2.add("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞");
            row2.add("–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫");

            KeyboardRow row3 = new KeyboardRow();
            row3.add("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç");
            if(user!=null && user.isAdmin()) {
                row3.add("–ê–¥–º–∏–Ω –º–µ–Ω—é");
            }
            keyboardMarkup.setKeyboard(List.of(row1,row2,row3));
        }
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        SendMessage sendMessage = new SendMessage();

        sendMessage.setReplyMarkup(keyboardMarkup);

        if(user==null){
            user = new User();
            user.setIdUser(chatId);
            user.setAdmin(false);
            user.setBlock(false);
            user.setUserFlag(true);
            user.setUsername(update.getMessage().getFrom().getUserName());
            List<Long> messageIdAndGroup = telegramBot.createTopic(update);
            user.setId_message(Math.toIntExact(messageIdAndGroup.getLast()));

            sent.sendMessageStart(user, user.getUsername() + ", –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç AdaptixBot", sendMessage);
            userDAO.save(user);
        }else{
            sent.sendMessage(user,user.getUsername() + ", —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", sendMessage);
        }
    }

    public void sendAdminMenu(User user, Integer messageId){
        Sent sent = new Sent();
        if(user.isAdmin()){
            if(messageId==null){
                SendMessage sendMessage = new SendMessage();
                Message sentMessage = sent.sendMessage(user,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ú–µ–Ω—é",sendMessage);
                messageId = sentMessage.getMessageId();
            }
            List<InlineKeyboardButton> row1 = new ArrayList<>();
            List<InlineKeyboardButton> row2 = new ArrayList<>();
            List<InlineKeyboardButton> row3 = new ArrayList<>();
            
            InlineKeyboardButton btnAddAdmin = new InlineKeyboardButton();
            btnAddAdmin.setText("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞");
            btnAddAdmin.setCallbackData("addAdmin:" + messageId);
            row1.add(btnAddAdmin);

            InlineKeyboardButton btnAddProduct = new InlineKeyboardButton();
            btnAddProduct.setText("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä");
            btnAddProduct.setCallbackData("addProduct:" + messageId);
            row1.add(btnAddProduct);

            InlineKeyboardButton btnIsAdmin= new InlineKeyboardButton();
            if(user.isUserFlag()){
                btnIsAdmin.setText("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
                btnIsAdmin.setCallbackData("isUser:" + messageId);
                row2.add(btnIsAdmin);
            }else {
                btnIsAdmin.setText("–ê–¥–º–∏–Ω");
                btnIsAdmin.setCallbackData("isUser:" + messageId);
                row2.add(btnIsAdmin);
            }
            
            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            InlineKeyboardButton btnAdminInterface = new InlineKeyboardButton();
            btnAdminInterface.setText("üîß –ê–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å");
            btnAdminInterface.setCallbackData("admin_menu");
            row3.add(btnAdminInterface);
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            keyboard.add(row1);
            keyboard.add(row2);
            keyboard.add(row3);

            InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
            inlineKeyboard.setKeyboard(keyboard);

            EditMessageReplyMarkup editMarkup = new EditMessageReplyMarkup();
            editMarkup.setChatId(user.getIdUser());
            editMarkup.setMessageId(messageId);
            editMarkup.setReplyMarkup(inlineKeyboard);

            sent.editMessageMarkup(user,messageId,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: –ê–¥–º–∏–Ω –º–µ–Ω—é",editMarkup);
        }
    }

    public void sendNumberPhone(User user){
        Sent createTelegramBot = new Sent();
        KeyboardButton contactButton = new KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä");
        contactButton.setRequestContact(true);

        KeyboardRow row = new KeyboardRow();
        row.add(contactButton);

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);
        createTelegramBot.sendReplyKeyboardMarkup(user,keyboardMarkup,"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
    }
    public void sendMenu(User user, String text){
        System.out.println("üè† sendMenu called for user: " + (user != null ? user.getUsername() : "null"));
        Sent sent = new Sent();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤");
        row1.add("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞");
        row2.add("–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç");
        if(user!=null && user.isAdmin()) {
            row3.add("–ê–¥–º–∏–Ω –º–µ–Ω—é");
        }

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1,row2,row3));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        SendMessage sendMessage = new SendMessage();

        sendMessage.setReplyMarkup(keyboardMarkup);
        
        String menuText = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>";
        
        System.out.println("üè† Sending menu text: " + (text != null ? text : menuText));
        
        if(text == null){
            sent.sendMessageStart(user, menuText, sendMessage);
        }else{
            sent.sendMessageStart(user, text, sendMessage);
        }
        
        System.out.println("üè† Menu sent successfully");
    }
    public void sendMenuAgain(User user, Integer messageID){
        TelegramBot telegramBot = new TelegramBot();
        telegramBot.deleteMessage(user.getIdUser(),messageID);
        Sent sent = new Sent();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤");
        row1.add("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤");
        KeyboardRow row2 = new KeyboardRow();
        row2.add("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞");
        row2.add("–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç");
        if(user!=null && user.isAdmin()) {
            row3.add("–ê–¥–º–∏–Ω –º–µ–Ω—é");
        }
        
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1,row2,row3));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        SendMessage sendMessage = new SendMessage();
        sendMessage.setReplyMarkup(keyboardMarkup);
        sent.sendMessageStart(user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ú–µ–Ω—é", sendMessage);
    }
    public void sendProducts(User user){
        Sent sent = new Sent();
        SendMessage sendMessage = new SendMessage();
        ProductDAO productDAO = new ProductDAO();

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        List<Product> products = productDAO.findAllAvailableForUsers();
        System.out.println("üîç sendProducts: Found " + products.size() + " products for user " + user.getIdUser());
        
        if(products.isEmpty()){
            System.out.println("‚ö†Ô∏è No products available for user " + user.getIdUser());
            sent.sendMessage(user,"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –≤—ã–∫—É–ø –Ω–µ—Ç",sendMessage);
            return;
        }
        TelegramBot telegramBot = new TelegramBot();
        ReplyKeyboardRemove keyboardRemove = new ReplyKeyboardRemove();
        keyboardRemove.setRemoveKeyboard(true);
        sendMessage.setReplyMarkup(keyboardRemove);

        int messageId = sent.sendMessage(user,"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",sendMessage).getMessageId();
        telegramBot.deleteMessage(user.getIdUser(),messageId);

        SendMessage sendAgain = new SendMessage();
        messageId = sent.sendMessage(user,"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",sendAgain).getMessageId();

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for(Product product : products){
            try {
                System.out.println("üîç Processing product: " + product.getProductName() + " (ID: " + product.getIdProduct() + ")");
                
                InlineKeyboardButton button = new InlineKeyboardButton();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–µ—Å—Ç
                String buttonText = product.getProductName() + "  " + product.getCashbackPercentage() + "% –∫–µ—à–±–µ–∫";
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–µ—Å—Ç
                int remainingSlots = product.getRemainingSlots();
                System.out.println("üîç Remaining slots: " + remainingSlots);
                
                if (remainingSlots > 0) {
                    buttonText += " (" + remainingSlots + " –º–µ—Å—Ç)";
                } else {
                    buttonText += " (–∑–∞–∫–æ–Ω—á–∏–ª—Å—è)";
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Ä–∞–Ω–µ–µ
                System.out.println("üîç Checking if user has purchased product...");
                boolean hasPurchased = hasUserPurchasedProduct(user.getIdUser(), product.getIdProduct());
                System.out.println("üîç User " + user.getIdUser() + " has purchased product " + product.getIdProduct() + ": " + hasPurchased);
                
            if (hasPurchased) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–æ–≤–∞—Ä –∏–ª–∏ –∫—É–ø–ª–µ–Ω
                ReservationService reservationService = ReservationService.getInstance();
                User tempUser = new User();
                tempUser.setIdUser(user.getIdUser());
                Product tempProduct = new Product();
                tempProduct.setIdProduct(product.getIdProduct());
                
                if (reservationService.isReservedByUser(tempUser, tempProduct)) {
                    buttonText += " ‚è∞ (–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤–∞–º–∏)";
                } else {
                    buttonText += " üîí (–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤–∞–º–∏)";
                }
            }
                
                System.out.println("üîç Button text: " + buttonText);
                button.setText(buttonText);
                button.setCallbackData("product_:" + product.getIdProduct() + ":" + messageId);
                rows.add(List.of(button));
                
                System.out.println("üîç Added button for product: " + product.getProductName());
            } catch (Exception e) {
                System.err.println("‚ùå Error processing product " + product.getIdProduct() + ": " + e.getMessage());
                e.printStackTrace();
            }
        }
        InlineKeyboardButton back = new InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        back.setCallbackData("Exit:" + messageId);
        rows.add(List.of(back));

        System.out.println("üîç Total buttons created: " + rows.size());
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        EditMessageReplyMarkup editMarkup = new EditMessageReplyMarkup();
        editMarkup.setChatId(user.getIdUser());
        editMarkup.setMessageId(messageId);
        editMarkup.setReplyMarkup(markup);

        System.out.println("üîç Sending keyboard with " + rows.size() + " rows to user " + user.getIdUser());
        sent.editMessageMarkup(user, messageId, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", editMarkup);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∞–¥–º–∏–Ω–∞ (–≤—Å–µ —Ç–æ–≤–∞—Ä—ã) –¥–ª—è –≤—ã–±–æ—Ä–∞
     */
    public void sendAdminProducts(User user){
        Sent sent = new Sent();
        SendMessage sendMessage = new SendMessage();
        ProductDAO productDAO = new ProductDAO();

        List<Product> products = productDAO.findAll();  // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∞–¥–º–∏–Ω–∞
        if(products.isEmpty()){
            sent.sendMessage(user,"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –≤—ã–∫—É–ø –Ω–µ—Ç",sendMessage);
            return;
        }
        TelegramBot telegramBot = new TelegramBot();
        ReplyKeyboardRemove keyboardRemove = new ReplyKeyboardRemove();
        keyboardRemove.setRemoveKeyboard(true);
        sendMessage.setReplyMarkup(keyboardRemove);

        int messageId = sent.sendMessage(user,"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",sendMessage).getMessageId();
        telegramBot.deleteMessage(user.getIdUser(),messageId);

        SendMessage sendAgain = new SendMessage();
        messageId = sent.sendMessage(user,"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",sendAgain).getMessageId();

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for(Product product : products){
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(product.getProductName() + "  " + product.getCashbackPercentage() + "% –∫–µ—à–±–µ–∫");
            button.setCallbackData("product_:" + product.getIdProduct() + ":" + messageId);
            rows.add(List.of(button));
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        EditMessageReplyMarkup editMarkup = new EditMessageReplyMarkup();
        editMarkup.setChatId(user.getIdUser());
        editMarkup.setMessageId(messageId);
        editMarkup.setReplyMarkup(markup);

        sent.editMessageMarkup(user, messageId, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", editMarkup);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞
     */
    public void showUserPurchases(User user) {
        Sent sent = new Sent();
        SendMessage sendMessage = new SendMessage();
        PurchaseDAO purchaseDAO = new PurchaseDAO();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–¥–µ –æ—Ç–∑—ã–≤ —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω (—ç—Ç–∞–ø 2)
        List<Purchase> purchases = purchaseDAO.findByUserId(user.getIdUser());
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        System.out.println("üîç Debug: Total purchases for user " + user.getIdUser() + ": " + purchases.size());
        for (Purchase purchase : purchases) {
            System.out.println("üîç Debug: Purchase ID " + purchase.getIdPurchase() + ", Stage: " + purchase.getPurchaseStage() + ", Product: " + purchase.getProduct().getProductName());
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–∫—É–ø–∫–∏, –≥–¥–µ –æ—Ç–∑—ã–≤ —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω, –Ω–æ –∫–µ—à–±–µ–∫ –µ—â–µ –Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω (purchaseStage >= 2 –∏ < 4)
        List<Purchase> eligiblePurchases = purchases.stream()
                .filter(purchase -> {
                    int stage = purchase.getPurchaseStage();
                    boolean eligible = stage >= 2 && stage < 4;
                    System.out.println("üîç Debug: Purchase " + purchase.getIdPurchase() + " stage " + stage + " eligible: " + eligible);
                    return eligible;
                })
                .collect(java.util.stream.Collectors.toList());
        
        System.out.println("üîç Debug: Eligible purchases for cashback: " + eligiblePurchases.size());
        
        if (eligiblePurchases.isEmpty()) {
            sent.sendMessage(user, "üí∏ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫, –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞.\n\n" +
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n" +
                    "1Ô∏è‚É£ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ ¬´–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤¬ª\n" +
                    "2Ô∏è‚É£ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª\n" +
                    "3Ô∏è‚É£ –î–æ–∂–¥–∞—Ç—å—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n" +
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫!\n\n" +
                    "üí° –ï—Å–ª–∏ –∫–µ—à–±–µ–∫ —É–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω, –æ–Ω –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ.", sendMessage);
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        KeyboardRow backRow = new KeyboardRow();
        backRow.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(backRow));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        sendMessage.setReplyMarkup(keyboardMarkup);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        sent.sendMessage(user, "üí∏ <b>–†–∞–∑–¥–µ–ª –∫–µ—à–±–µ–∫–∞</b>", sendMessage);
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∫—É–ø–æ–∫
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        for (Purchase purchase : eligiblePurchases) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            String stageText = getPurchaseStageText(purchase.getPurchaseStage());
            button.setText(purchase.getProduct().getProductName() + " - " + stageText);
            button.setCallbackData("cashback_purchase:" + purchase.getIdPurchase());
            rows.add(List.of(button));
        }
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);
        
        SendMessage inlineMessage = new SendMessage();
        inlineMessage.setReplyMarkup(markup);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        sent.sendMessage(user, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞:", inlineMessage);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void showUserCabinet(User user) {
        Sent sent = new Sent();
        PurchaseDAO purchaseDAO = new PurchaseDAO();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        List<Purchase> purchases = purchaseDAO.findByUserId(user.getIdUser());
        
        if (purchases.isEmpty()) {
            sent.sendMessage(user, "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n" +
                    "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.\n" +
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤¬ª —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É!");
            return;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–∞—Ö
        StringBuilder cabinetInfo = new StringBuilder();
        cabinetInfo.append("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n");
        
        for (Purchase purchase : purchases) {
            cabinetInfo.append("üóìÔ∏è –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ")
                    .append(formatDateTime(purchase.getDate(), purchase.getOrderTime()))
                    .append("\n");
            
            cabinetInfo.append("üì¶ –¢–æ–≤–∞—Ä: ")
                    .append(purchase.getProduct().getProductName())
                    .append("\n");
            
            cabinetInfo.append("üîÑ –°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞: ")
                    .append(getReviewStatusText(purchase.getPurchaseStage()))
                    .append("\n");
            
            cabinetInfo.append("üì∏ –°—Ç–∞—Ç—É—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç–∑—ã–≤–∞: ")
                    .append(getScreenshotStatusText(purchase.getPurchaseStage()))
                    .append("\n");
            
            cabinetInfo.append("üí∞ –°—Ç–∞—Ç—É—Å –≤—ã–ø–ª–∞—Ç—ã: ")
                    .append(getPaymentStatusText(purchase.getPurchaseStage()))
                    .append("\n\n");
        }
        
        sent.sendMessage(user, cabinetInfo.toString());
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞
     */
    public void showUserProductsForReview(User user) {
        System.out.println("üîç DEBUG: showUserProductsForReview called for user " + user.getIdUser());
        Sent sent = new Sent();
        PurchaseDAO purchaseDAO = new PurchaseDAO();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        List<Purchase> purchases = purchaseDAO.findByUserId(user.getIdUser());
        System.out.println("üîç DEBUG: Found " + purchases.size() + " total purchases for user");
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏, –≥–¥–µ —Ç–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞–Ω –∏ –æ—Ç–∑—ã–≤ –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω
        List<Purchase> eligiblePurchases = purchases.stream()
                .filter(purchase -> purchase.getPurchaseStage() >= 0 && purchase.getPurchaseStage() < 2)
                .collect(java.util.stream.Collectors.toList());
        
        System.out.println("üîç DEBUG: Found " + eligiblePurchases.size() + " eligible purchases for review");
        
        if (eligiblePurchases.isEmpty()) {
            System.out.println("üîç DEBUG: No eligible purchases, showing message");
            sent.sendMessage(user, "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n" +
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –æ—Ç–∑—ã–≤–∞.\n\n" +
                    "–î–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n" +
                    "1Ô∏è‚É£ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ ¬´–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤¬ª\n" +
                    "2Ô∏è‚É£ –î–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n" +
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!");
            return;
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
        if (eligiblePurchases.size() == 1) {
            System.out.println("üîç DEBUG: Single eligible purchase found, creating session");
            Purchase purchase = eligiblePurchases.get(0);
            System.out.println("üîç DEBUG: Purchase ID: " + purchase.getIdPurchase() + ", Stage: " + purchase.getPurchaseStage());
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            KeyboardRow backRow = new KeyboardRow();
            backRow.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
            
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            keyboardMarkup.setKeyboard(List.of(backRow));
            keyboardMarkup.setResizeKeyboard(true);
            keyboardMarkup.setOneTimeKeyboard(false);
            
            SendMessage sendMessage = new SendMessage();
            sendMessage.setReplyMarkup(keyboardMarkup);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
            String productName = (purchase.getProduct() != null && purchase.getProduct().getProductName() != null) 
                ? purchase.getProduct().getProductName() 
                : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä";
            String message = "üìù –í—ã –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä: \"" + productName + "\"\n\n" +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–≤–∞—Ä–µ üñä";
            
            sent.sendMessage(user, message, sendMessage);
            System.out.println("üîç DEBUG: Message sent to user");
            
            // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–¥–∞—á–∏ –æ—Ç–∑—ã–≤–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            ReviewSubmissionSession session = new ReviewSubmissionSession(purchase);
            session.setStep(ReviewSubmissionSession.Step.TEXT); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
            RedisSessionStore.setReviewSubmissionSession(user.getIdUser(), session);
            RedisSessionStore.setState(user.getIdUser(), "REVIEW_SUBMISSION_TEXT"); // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            System.out.println("üîç DEBUG: Session created and state set to REVIEW_SUBMISSION_TEXT");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
            ReviewSubmissionSession checkSession = RedisSessionStore.getReviewSubmissionSession(user.getIdUser());
            if (checkSession != null) {
                System.out.println("üîç DEBUG: Session verification successful, step = " + checkSession.getStep());
            } else {
                System.out.println("üîç DEBUG: Session verification FAILED - session lost!");
            }
            
            return;
        }
        
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        KeyboardRow backRow = new KeyboardRow();
        backRow.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(backRow));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        
        SendMessage sendMessage = new SendMessage();
        sendMessage.setReplyMarkup(keyboardMarkup);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        sent.sendMessage(user, "üìù <b>–†–∞–∑–¥–µ–ª –æ—Ç–∑—ã–≤–æ–≤</b>", sendMessage);
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        for (Purchase purchase : eligiblePurchases) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(purchase.getProduct().getProductName());
            button.setCallbackData("review_product:" + purchase.getIdPurchase());
            rows.add(List.of(button));
        }
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);
        
        SendMessage inlineMessage = new SendMessage();
        inlineMessage.setReplyMarkup(markup);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        sent.sendMessage(user, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:", inlineMessage);
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
     */
    private String formatDateTime(java.time.LocalDate date, java.time.LocalTime time) {
        if (date == null) {
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        }
        
        String dateStr = String.format("%02d.%02d.%02d", 
                date.getDayOfMonth(), date.getMonthValue(), date.getYear() % 100);
        
        if (time != null) {
            String timeStr = String.format("%02d:%02d:%02d", 
                    time.getHour(), time.getMinute(), time.getSecond());
            return dateStr + " " + timeStr;
        }
        
        return dateStr;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞
     */
    private String getReviewStatusText(int purchaseStage) {
        switch (purchaseStage) {
            case -1: return "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞";
            case 0: return "–û—Ç–∑—ã–≤ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω";
            case 1: return "–û—Ç–∑—ã–≤ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω";
            case 2: return "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é";
            case 3: return "–û—Ç–∑—ã–≤ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω";
            case 4: return "–û—Ç–∑—ã–≤ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω";
            default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç–∑—ã–≤–∞
     */
    private String getScreenshotStatusText(int purchaseStage) {
        switch (purchaseStage) {
            case -1: return "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞";
            case 0: return "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è";
            case 1: return "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è";
            case 2: return "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω";
            case 3: return "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω";
            case 4: return "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω";
            default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã
     */
    private String getPaymentStatusText(int purchaseStage) {
        switch (purchaseStage) {
            case -1: return "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞";
            case 0: return "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è";
            case 1: return "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞";
            case 2: return "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–µ—à–±–µ–∫–∞";
            case 3: return "–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã";
            case 4: return "–í—ã–ø–ª–∞—á–µ–Ω–æ";
            default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å";
        }
    }
    
    public void sendMessageBank(User user, String text){
        Sent sent = new Sent();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–°–±–µ—Ä");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        SendMessage sendMessage = new SendMessage();

        sendMessage.setReplyMarkup(keyboardMarkup);
        sent.sendMessageStart(user, text, sendMessage);
    }
    public void sentOneProduct(User user, Product selected, int messageId){
        Sent sent = new Sent();
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        TelegramBot telegramBot = new TelegramBot();
        telegramBot.deleteMessage(user.getIdUser(), messageId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        if (selected.getGroupMessageId() != null) {
            try {
                // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
                ResourceBundle rb = ResourceBundle.getBundle("app");
                long groupID = Long.parseLong(rb.getString("tg.group"));
                
                // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ —à–∞–ø–∫–∏ "–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç")
                sent.copyMessageFromGroup(user.getIdUser(), groupID, selected.getGroupMessageId().intValue());
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                sendProductButtons(user, selected, messageId);
                
                System.out.println("‚úÖ Product message forwarded from group " + groupID + " message " + selected.getGroupMessageId() + " to user " + user.getIdUser());
                return;
                
            } catch (Exception e) {
                System.err.println("‚ùå Error forwarding product message: " + e.getMessage());
                e.printStackTrace();
                // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
            }
        }
        
        // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        System.out.println("‚ö†Ô∏è Using fallback method for product " + selected.getIdProduct() + " (no group message ID)");
        
        String textProduct =
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: "+ selected.getProductName() + " \n" +
                        "\n" +
                        "–ö–µ—à–±–µ–∫ " + selected.getCashbackPercentage() +  "% –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ \uD83D\uDE4F\n" +
                        "–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –°–±–µ—Ä–∞ (–†–æ—Å—Å–∏—è)\n" +
                        "\n" +
                        "–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:\n" +
                        "- –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @adaptix_focus \uD83D\uDE09\n" +
                        "- –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–º—ã –µ–≥–æ –º–æ–∂–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å)\n" +
                        "- –ù–∞–π–¥–∏—Ç–µ –Ω–∞—à —Ç–æ–≤–∞—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É \""+ selected.getKeyQuery() +"\" \uD83D\uDD0E\n" +
                        "- –ó–∞–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É\n" +
                        "- –ó–∞–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä —Å –ü–í–ó –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –¥–Ω–µ–π\uD83D\uDC4D\n" +
                        "- –°–æ–≥–ª–∞—Å—É–π—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ\n" +
                        "- –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏)\n" +
                        "- –ö–µ—à–±–µ–∫ –í–´–ü–õ–ê–ß–ò–í–ê–ï–¢–°–Ø –í –ü–ù –ò –ü–¢\uD83D\uDCB3\n" +
                        "\n" +
                        "–í–∞–∂–Ω–æ:\n" +
                        "- –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π —Ä–∞–∑–¥–∞—á–µ –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏\n" +
                        "- –§–ò–û –≤ –∑–∞–∫–∞–∑–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã\uD83D\uDC64\n" +
                        "- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ—Ç–∑—ã–≤–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã\uD83D\uDCF8\n" +
                        "- –û—Ç–∑—ã–≤ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 3 –¥–Ω–µ–π –ø–æ—Å–ª–µ –∑–∞–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ü–í–ó \uD83D\uDCC5\n" +
                        "- –ñ–µ–ª–∞—é—â–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –ü–í–ó –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏ \uD83D\uDEAB";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        File photoFile = new File(selected.getPhoto());
        if (!photoFile.exists()) {
            System.err.println("‚ùå Product photo file does not exist: " + selected.getPhoto());
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            SendMessage textMessage = new SendMessage();
            textMessage.setChatId(String.valueOf(user.getIdUser()));
            textMessage.setText(textProduct);
            textMessage.setReplyMarkup(createProductKeyboard(selected, messageId, user));
            textMessage.setParseMode("HTML");
            
            sent.sendMessageWithMarkup(user, textMessage);
            return;
        }

        SendPhoto sendPhoto = new SendPhoto();
        sendPhoto.setChatId(String.valueOf(user.getIdUser()));
        sendPhoto.setReplyMarkup(createProductKeyboard(selected, messageId, user));

        sent.sendPhotoWithButton(user.getIdUser(), selected.getPhoto(), textProduct, sendPhoto);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞
     */
    private InlineKeyboardMarkup createProductKeyboard(Product selected, int messageId, User user) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton back = new InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        back.setCallbackData("Exit_Product:" + messageId);
        keyboard.add(List.of(back));

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
        InlineKeyboardButton buy;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
        if (!selected.hasAvailableSlots()) {
            buy = new InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏–ª—Å—è");
            buy.setCallbackData("product_sold_out:" + selected.getIdProduct());
        } else if (hasUserPurchasedProduct(user.getIdUser(), selected.getIdProduct())) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤–∞–º–∏" –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–∫—É–ø–∞–ª —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
            buy = new InlineKeyboardButton("üîí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤–∞–º–∏");
            buy.setCallbackData("product_reserved:" + selected.getIdProduct());
        } else if (!user.isAdmin() && !canUserOrderNow(user)) {
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–∫–∞–∑–æ–≤: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 14 –¥–Ω–µ–π
            buy = new InlineKeyboardButton("‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π");
            buy.setCallbackData("order_rate_limited:" + selected.getIdProduct());
        } else {
            // –¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            buy = new InlineKeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å");
            buy.setCallbackData("buy_product:" + selected.getIdProduct());
        }
        
        // –ö–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –¥–ª—è –ø–æ–ª–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        keyboard.add(List.of(buy));

        InlineKeyboardMarkup inlineMarkup = new InlineKeyboardMarkup();
        inlineMarkup.setKeyboard(keyboard);
        return inlineMarkup;
    }

    private boolean canUserOrderNow(User user){
        PurchaseDAO purchaseDAO = new PurchaseDAO();
        List<Purchase> purchases = purchaseDAO.findByUserId(user.getIdUser());
        java.time.LocalDate lastOrderDate = null;
        for(Purchase p : purchases){
            if(p.getDate()!=null){
                if(lastOrderDate==null || p.getDate().isAfter(lastOrderDate)){
                    lastOrderDate = p.getDate();
                }
            }
        }
        if(lastOrderDate==null) return true;
        return !lastOrderDate.isAfter(java.time.LocalDate.now().minusDays(14));
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
     */
    private void sendProductButtons(User user, Product selected, int messageId) {
        Sent sent = new Sent();
        SendMessage buttonMessage = new SendMessage();
        buttonMessage.setChatId(String.valueOf(user.getIdUser()));
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        String centeredText = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ";
        buttonMessage.setText(centeredText);
        buttonMessage.setReplyMarkup(createProductKeyboard(selected, messageId, user));
        buttonMessage.setParseMode("HTML");
        
        sent.sendMessageWithMarkup(user, buttonMessage);
    }
    
    /**
     * –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–µ
     */
    private String centerText(String text, int width) {
        if (text == null || text.trim().isEmpty()) {
            return text;
        }
        
        String trimmedText = text.trim();
        int textLength = trimmedText.length();
        
        if (textLength >= width) {
            return trimmedText;
        }
        
        int padding = (width - textLength) / 2;
        StringBuilder centered = new StringBuilder();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã —Å–ª–µ–≤–∞
        for (int i = 0; i < padding; i++) {
            centered.append(" ");
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        centered.append(trimmedText);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã —Å–ø—Ä–∞–≤–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        int remainingPadding = width - centered.length();
        for (int i = 0; i < remainingPadding; i++) {
            centered.append(" ");
        }
        
        return centered.toString();
    }

    public void sentBack(User user, String text, String buttonText){
        Sent sent = new Sent();
        KeyboardRow row1 = new KeyboardRow();
        row1.add(buttonText);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        SendMessage sendMessage = new SendMessage();

        sendMessage.setReplyMarkup(keyboardMarkup);

        sent.sendMessage(user,text, sendMessage);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é (edit message)
     */
    public void updateMenu(User user, int messageId, String text) {
        Sent sent = new Sent();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤");
        row1.add("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞");
        row2.add("–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç");
        if(user!=null && user.isAdmin()) {
            row3.add("–ê–¥–º–∏–Ω –º–µ–Ω—é");
        }

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1,row2,row3));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        
        String messageText = text != null ? text : "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ú–µ–Ω—é";
        sent.editMessageMarkup(user, messageId, messageText, null);
    }

    // ==================== –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ====================

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
     */
    public void showAdminMenu(User admin) {
        System.out.println("üîß Showing admin menu for user: " + admin.getUsername());
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤"
        InlineKeyboardButton productsButton = new InlineKeyboardButton();
        productsButton.setText("üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤");
        productsButton.setCallbackData("admin_products");
        
        // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
        InlineKeyboardButton addProductButton = new InlineKeyboardButton();
        addProductButton.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä");
        addProductButton.setCallbackData("admin_add_product");
        
        // –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        InlineKeyboardButton statsButton = new InlineKeyboardButton();
        statsButton.setText("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        statsButton.setCallbackData("admin_stats");
        
        // –ö–Ω–æ–ø–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        InlineKeyboardButton userManagementButton = new InlineKeyboardButton();
        userManagementButton.setText("üë• –ê–¥–º–∏–Ω—ã");
        userManagementButton.setCallbackData("admin_user_management");
        
        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        InlineKeyboardButton blockUserButton = new InlineKeyboardButton();
        blockUserButton.setText("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        blockUserButton.setCallbackData("admin_block_user");
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        InlineKeyboardButton settingsButton = new InlineKeyboardButton();
        settingsButton.setText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
        settingsButton.setCallbackData("admin_settings");
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é"
        InlineKeyboardButton backToMenuButton = new InlineKeyboardButton();
        backToMenuButton.setText("üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é");
        backToMenuButton.setCallbackData("admin_back_to_main_menu");
        
        rows.add(List.of(productsButton));
        rows.add(List.of(addProductButton));
        rows.add(List.of(statsButton));
        rows.add(List.of(userManagementButton));
        rows.add(List.of(blockUserButton));
        rows.add(List.of(settingsButton));
        rows.add(List.of(backToMenuButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        System.out.println("üì§ Sending admin menu message");
        sent.sendMessage(admin, "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", message);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ (edit message)
     */
    public void updateAdminMenu(User admin, int messageId) {
        System.out.println("üîß Updating admin menu for user: " + admin.getUsername());
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤"
        InlineKeyboardButton productsButton = new InlineKeyboardButton();
        productsButton.setText("üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤");
        productsButton.setCallbackData("admin_products");
        
        // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
        InlineKeyboardButton addProductButton = new InlineKeyboardButton();
        addProductButton.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä");
        addProductButton.setCallbackData("admin_add_product");
        
        // –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        InlineKeyboardButton statsButton = new InlineKeyboardButton();
        statsButton.setText("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        statsButton.setCallbackData("admin_stats");
        
        // –ö–Ω–æ–ø–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        InlineKeyboardButton userManagementButton = new InlineKeyboardButton();
        userManagementButton.setText("üë• –ê–¥–º–∏–Ω—ã");
        userManagementButton.setCallbackData("admin_user_management");
        
        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        InlineKeyboardButton blockUserButton = new InlineKeyboardButton();
        blockUserButton.setText("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        blockUserButton.setCallbackData("admin_block_user");
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        InlineKeyboardButton settingsButton = new InlineKeyboardButton();
        settingsButton.setText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
        settingsButton.setCallbackData("admin_settings");
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é"
        InlineKeyboardButton backToMenuButton = new InlineKeyboardButton();
        backToMenuButton.setText("üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é");
        backToMenuButton.setCallbackData("admin_back_to_main_menu");
        
        rows.add(List.of(productsButton));
        rows.add(List.of(addProductButton));
        rows.add(List.of(statsButton));
        rows.add(List.of(userManagementButton));
        rows.add(List.of(blockUserButton));
        rows.add(List.of(settingsButton));
        rows.add(List.of(backToMenuButton));
        
        keyboard.setKeyboard(rows);
        
        Sent sent = new Sent();
        System.out.println("üì§ Updating admin menu message");
        sent.editMessageMarkup(admin, messageId, "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", null);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
     */
    public void showProductsList(User admin) {
        showProductsListWithEditButtons(admin);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void showBlockUserInterface(User admin) {
        Sent sent = new Sent();
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é");
        backButton.setCallbackData("admin_back_to_menu");
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        sent.sendMessage(admin, "üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n" +
                "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ @):\n\n" +
                "–ü—Ä–∏–º–µ—Ä: <code>username123</code>\n\n" +
                "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω—è—Ç—ã –≤—Å–µ –µ–≥–æ –±—Ä–æ–Ω–∏ —Ç–æ–≤–∞—Ä–æ–≤.", message);
    }
    
    /**
     * –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–Ω—è—Ç–∏–µ–º –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π
     */
    public void blockUser(User admin, String username) {
        System.out.println("üîç blockUser called: admin=" + admin.getUsername() + ", targetUsername=" + username);
        
        try {
            UserDAO userDAO = new UserDAO();
            System.out.println("üîç Searching for user with username: " + username);
            User targetUser = userDAO.findByUsername(username);
            
            if (targetUser == null) {
                System.out.println("üîç User not found: " + username);
                Sent sent = new Sent();
                sent.sendMessage(admin, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username <code>" + username + "</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }
            
            System.out.println("üîç User found: " + targetUser.getIdUser() + ", username=" + targetUser.getUsername() + ", isAdmin=" + targetUser.isAdmin() + ", isBlock=" + targetUser.isBlock());
            
            if (targetUser.isAdmin()) {
                System.out.println("üîç Cannot block admin");
                Sent sent = new Sent();
                sent.sendMessage(admin, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!");
                return;
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º (—Ç–æ–≥–≥–ª)
            if (targetUser.isBlock()) {
                targetUser.setBlock(false);
                userDAO.update(targetUser);

                Sent sent = new Sent();
                try {
                    sent.sendMessage(targetUser, "‚úÖ <b>–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>\n\n–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.");
                } catch (Exception e) {
                    System.err.println("‚ùå Failed to notify unblocked user: " + e.getMessage());
                }

                sent.sendMessage(admin, "‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n" +
                        "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>" + username + "</code>\n" +
                        "üÜî ID: <code>" + targetUser.getIdUser() + "</code>");

                // –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
                showAdminMenu(admin);
                return;
            }
            
            // –°–Ω–∏–º–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            System.out.println("üîç Cancelling user reservations...");
            int cancelledReservations = cancelAllUserReservations(targetUser);
            System.out.println("üîç Cancelled reservations: " + cancelledReservations);
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            System.out.println("üîç Blocking user...");
            targetUser.setBlock(true);
            userDAO.update(targetUser);
            System.out.println("üîç User blocked in DB");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            System.out.println("üîç Sending notification to blocked user...");
            Sent sent = new Sent();
            try {
                sent.sendMessage(targetUser, "üö´ <b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n" +
                        "–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
                System.out.println("üîç Notification sent to user");
            } catch (Exception e) {
                System.err.println("‚ùå Failed to notify blocked user: " + e.getMessage());
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            System.out.println("üîç Sending confirmation to admin...");
            sent.sendMessage(admin, "‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n" +
                    "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>" + username + "</code>\n" +
                    "üÜî ID: <code>" + targetUser.getIdUser() + "</code>\n" +
                    "üì¶ –û—Ç–º–µ–Ω–µ–Ω–æ –±—Ä–æ–Ω–µ–π: <code>" + cancelledReservations + "</code>\n\n" +
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.");
            System.out.println("üîç Confirmation sent to admin");
            
            System.out.println("üö´ User " + username + " (ID: " + targetUser.getIdUser() + ") blocked by admin " + admin.getUsername());
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
            System.out.println("üîç Showing admin menu...");
            showAdminMenu(admin);
            System.out.println("üîç Admin menu shown");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error blocking user: " + e.getMessage());
            e.printStackTrace();
            
            Sent sent = new Sent();
            sent.sendMessage(admin, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }
    
    /**
     * –°–Ω—è—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private int cancelAllUserReservations(User user) {
        int cancelledCount = 0;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            ProductDAO productDAO = new ProductDAO();
            List<Product> allProducts = productDAO.findAll();
            
            ReservationService reservationService = ReservationService.getInstance();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±—Ä–æ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (Product product : allProducts) {
                if (reservationService.isReservedByUser(user, product)) {
                    boolean cancelled = reservationService.cancelReservation(user, product);
                    if (cancelled) {
                        cancelledCount++;
                        System.out.println("üö´ Cancelled reservation for user " + user.getIdUser() + 
                                ", product " + product.getIdProduct());
                    }
                }
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Error cancelling user reservations: " + e.getMessage());
            e.printStackTrace();
        }
        
        return cancelledCount;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public void showProductsListWithEditButtons(User admin) {
        long startTime = System.currentTimeMillis();
        
        ProductDAO productDAO = new ProductDAO();
        long productsLoadStart = System.currentTimeMillis();
        List<Product> products = productDAO.findAll();
        long productsLoadEnd = System.currentTimeMillis();
        System.out.println("‚è±Ô∏è Products loaded in " + (productsLoadEnd - productsLoadStart) + " ms");
        
        System.out.println("üîç Found " + products.size() + " products in database");
        
        if (products.isEmpty()) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
            
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
            backButton.setCallbackData("admin_back_to_menu");
            
            rows.add(List.of(backButton));
            keyboard.setKeyboard(rows);
            
            SendMessage message = new SendMessage();
            message.setReplyMarkup(keyboard);
            
            Sent sent = new Sent();
            sent.sendMessage(admin, "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç", message);
            return;
        }
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        for (Product product : products) {
            // –ö–Ω–æ–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –≤–∏–¥–∏–º–æ—Å—Ç–∏
            InlineKeyboardButton productButton = new InlineKeyboardButton();
            String visibilityIcon = product.isVisible() ? "üëÅÔ∏è" : "üôà";
            productButton.setText(visibilityIcon + " " + product.getProductName() + " (ID: " + product.getIdProduct() + ")");
            productButton.setCallbackData("admin_product_" + product.getIdProduct());
            
            // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–º–µ–Ω—å—à–µ)
            InlineKeyboardButton editButton = new InlineKeyboardButton();
            editButton.setText("‚úèÔ∏è");
            editButton.setCallbackData("admin_edit_product_" + product.getIdProduct());
            
            // –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            rows.add(List.of(productButton, editButton));
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
        backButton.setCallbackData("admin_back_to_menu");
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        sent.sendMessage(admin, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫—É–ø–æ–∫ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", message);
        
        long endTime = System.currentTimeMillis();
        System.out.println("‚è±Ô∏è showProductsListWithEditButtons completed in " + (endTime - startTime) + " ms");
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public void showProductsListWithEdit(User admin) {
        ProductDAO productDAO = new ProductDAO();
        List<Product> products = productDAO.findAll();
        
        System.out.println("üîç Found " + products.size() + " products in database");
        
        if (products.isEmpty()) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
            
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
            backButton.setCallbackData("admin_back_to_menu");
            
            rows.add(List.of(backButton));
            keyboard.setKeyboard(rows);
            
            SendMessage message = new SendMessage();
            message.setReplyMarkup(keyboard);
            
            Sent sent = new Sent();
            sent.sendMessage(admin, "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç", message);
            return;
        }
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        for (Product product : products) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(product.getProductName() + " (ID: " + product.getIdProduct() + ")");
            button.setCallbackData("admin_product_" + product.getIdProduct());
            
            rows.add(List.of(button));
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
        backButton.setCallbackData("admin_back_to_menu");
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        sent.sendMessage(admin, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫—É–ø–æ–∫:", message);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (edit message)
     */
    public void updateProductsList(User admin, int messageId) {
        ProductDAO productDAO = new ProductDAO();
        List<Product> products = productDAO.findAll();
        
        System.out.println("üîç Found " + products.size() + " products in database (update)");
        
        if (products.isEmpty()) {
            Sent sent = new Sent();
            sent.editMessageMarkup(admin, messageId, "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç", null);
            return;
        }
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        for (Product product : products) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(product.getProductName() + " (ID: " + product.getIdProduct() + ")");
            button.setCallbackData("admin_product_" + product.getIdProduct());
            
            rows.add(List.of(button));
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
        backButton.setCallbackData("admin_back_to_menu");
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        EditMessageReplyMarkup editMarkup = new EditMessageReplyMarkup();
        editMarkup.setChatId(admin.getIdUser());
        editMarkup.setMessageId(messageId);
        editMarkup.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        sent.editMessageMarkup(admin, messageId, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫—É–ø–æ–∫:", editMarkup);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—É–ø–∏–≤—à–∏—Ö —Ç–æ–≤–∞—Ä
     */
    public void showProductPurchases(User admin, int productId) {
        System.out.println("üîç showProductPurchases: Starting for product ID " + productId);
        
        long startTime = System.currentTimeMillis();
        
        ProductDAO productDAO = new ProductDAO();
        PurchaseDAO purchaseDAO = new PurchaseDAO();
        
        long productLoadStart = System.currentTimeMillis();
        Product product = productDAO.findById(productId);
        long productLoadEnd = System.currentTimeMillis();
        System.out.println("‚è±Ô∏è Product loaded in " + (productLoadEnd - productLoadStart) + " ms");
        
        if (product == null) {
            System.out.println("‚ùå Product not found for ID: " + productId);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
            
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º");
            backButton.setCallbackData("admin_back_to_products");
            
            rows.add(List.of(backButton));
            keyboard.setKeyboard(rows);
            
            SendMessage message = new SendMessage();
            message.setReplyMarkup(keyboard);
            
            Sent sent = new Sent();
            sent.sendMessage(admin, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", message);
            return;
        }
        
        long purchasesLoadStart = System.currentTimeMillis();
        System.out.println("üîç Loading purchases for product ID " + productId);
        List<Purchase> purchases = purchaseDAO.findByProductId(productId);
        long purchasesLoadEnd = System.currentTimeMillis();
        System.out.println("‚è±Ô∏è Purchases loaded in " + (purchasesLoadEnd - purchasesLoadStart) + " ms");
        System.out.println("üîç Found " + purchases.size() + " purchases for product ID " + productId);
        
        if (purchases.isEmpty()) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–∫—É–ø–æ–∫ –Ω–µ—Ç
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
            
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º");
            backButton.setCallbackData("admin_back_to_products");
            
            rows.add(List.of(backButton));
            keyboard.setKeyboard(rows);
            
            SendMessage message = new SendMessage();
            message.setReplyMarkup(keyboard);
            
            Sent sent = new Sent();
            sent.sendMessage(admin, "üì¶ –ü–æ–∫—É–ø–æ–∫ –ø–æ —Ç–æ–≤–∞—Ä—É \"" + product.getProductName() + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", message);
            return;
        }
        
        System.out.println("üîç Creating buttons for " + purchases.size() + " purchases");
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        for (Purchase purchase : purchases) {
            try {
                String username = purchase.getUser() != null ? purchase.getUser().getUsername() : "Unknown";
                String stageText = getPurchaseStageText(purchase.getPurchaseStage());
                String buttonText = username + " - " + stageText;
                
                System.out.println("üîç Creating button for purchase " + purchase.getIdPurchase() + ": " + buttonText);
                
                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText(buttonText);
                button.setCallbackData("admin_user_" + purchase.getIdPurchase());
                
                rows.add(List.of(button));
            } catch (Exception e) {
                System.err.println("‚ùå Error creating button for purchase " + purchase.getIdPurchase() + ": " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º");
        backButton.setCallbackData("admin_back_to_products");
        
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        sent.sendMessage(admin, "üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Ç–æ–≤–∞—Ä–∞ \"" + product.getProductName() + "\":", message);
        
        long endTime = System.currentTimeMillis();
        System.out.println("‚è±Ô∏è showProductPurchases completed in " + (endTime - startTime) + " ms");
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–∫–∏
     */
    public void showPurchaseDetails(User admin, int purchaseId) {
        PurchaseDAO purchaseDAO = new PurchaseDAO();
        Purchase purchase = purchaseDAO.findById(purchaseId);
        
        if (purchase == null) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
            
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º");
            backButton.setCallbackData("admin_back_to_products");
            
            rows.add(List.of(backButton));
            keyboard.setKeyboard(rows);
            
            SendMessage message = new SendMessage();
            message.setReplyMarkup(keyboard);
            
            Sent sent = new Sent();
            sent.sendMessage(admin, "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", message);
            return;
        }
        
        String timeText = "";
        if (purchase.getOrderTime() != null) {
            timeText = "\nüïê –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: " + purchase.getOrderTime().format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"));
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–µ –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–≤–ª–µ–Ω
        String reviewInfo = "";
        if (purchase.getPurchaseStage() >= 2) {
            reviewInfo = "\n‚≠ê –û—Ç–∑—ã–≤: –û—Å—Ç–∞–≤–ª–µ–Ω";
            if (purchase.getReviewMessageId() != null) {
                reviewInfo += " ‚úÖ";
            }
        }
        
        String text = "üõí –î–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–∫–∏:\n\n" +
                     "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @" + purchase.getUser().getUsername() + "\n" +
                     "üì¶ –¢–æ–≤–∞—Ä: " + purchase.getProduct().getProductName() + "\n" +
                     "üìÖ –î–∞—Ç–∞: " + purchase.getDate() + timeText + "\n" +
                     "üìä –°—Ç–∞—Ç—É—Å: " + getPurchaseStageText(purchase.getPurchaseStage()) + reviewInfo + "\n\n" +
                     "üìã –≠—Ç–∞–ø—ã –ø–æ–∫—É–ø–∫–∏:";
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º —ç—Ç–∞–ø–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã)
        System.out.println("üîç Debug: PurchaseStage = " + purchase.getPurchaseStage());
        System.out.println("üîç Debug: OrderMessageId = " + purchase.getOrderMessageId());
        System.out.println("üîç Debug: ReviewMessageId = " + purchase.getReviewMessageId());
        System.out.println("üîç Debug: CashbackMessageId = " + purchase.getCashbackMessageId());
        
        // –≠—Ç–∞–ø 1: –¢–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞–Ω (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π)
        if (purchase.getOrderMessageId() != null) {
            try {
                ResourceBundle rb = ResourceBundle.getBundle("app");
                String groupIdStr = rb.getString("tg.group");
                
                // –î–ª—è –≥—Ä—É–ø–ø —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏ (topics) —Å—Å—ã–ª–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É
                // –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π ID –≥—Ä—É–ø–ø—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                String orderUrl;
                if (groupIdStr.startsWith("-100")) {
                    // –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏
                    orderUrl = "https://t.me/c/" + groupIdStr.substring(4) + "/" + purchase.getOrderMessageId();
                } else if (groupIdStr.startsWith("-")) {
                    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø
                    orderUrl = "https://t.me/c/" + groupIdStr.substring(1) + "/" + purchase.getOrderMessageId();
                } else {
                    // Fallback
                    orderUrl = "https://t.me/c/" + groupIdStr + "/" + purchase.getOrderMessageId();
                }
                
                InlineKeyboardButton orderButton = new InlineKeyboardButton();
                orderButton.setText("1Ô∏è‚É£ –¢–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞–Ω ‚úÖ");
                orderButton.setUrl(orderUrl);
                rows.add(List.of(orderButton));
                
                System.out.println("üîó Created order link: " + orderUrl + " for purchase ID: " + purchase.getIdPurchase());
                System.out.println("üîó Group ID: " + groupIdStr + ", Message ID: " + purchase.getOrderMessageId());
            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø –±–µ–∑ —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç messageId
            InlineKeyboardButton orderButton = new InlineKeyboardButton();
            orderButton.setText("1Ô∏è‚É£ –¢–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞–Ω ‚úÖ");
            orderButton.setCallbackData("no_message_available");
            rows.add(List.of(orderButton));
            
            System.out.println("‚ö†Ô∏è No orderMessageId for purchase ID: " + purchase.getIdPurchase());
        }
        
        // –≠—Ç–∞–ø 2: –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–∑—ã–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω)
        if (purchase.getPurchaseStage() >= 2) {
            if (purchase.getReviewMessageId() != null) {
                try {
                    ResourceBundle rb = ResourceBundle.getBundle("app");
                    String groupIdStr = rb.getString("tg.group");
                    
                    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "-100" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    String cleanGroupId = groupIdStr;
                    if (groupIdStr.startsWith("-100")) {
                        cleanGroupId = groupIdStr.substring(4);
                    } else if (groupIdStr.startsWith("100")) {
                        cleanGroupId = groupIdStr.substring(3);
                    }
                    
                    String reviewUrl = "https://t.me/c/" + cleanGroupId + "/" + purchase.getReviewMessageId();
                    
                    InlineKeyboardButton reviewButton = new InlineKeyboardButton();
                    reviewButton.setText("2Ô∏è‚É£ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úÖ");
                    reviewButton.setUrl(reviewUrl);
                    rows.add(List.of(reviewButton));
                } catch (Exception e) {
                    System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤: " + e.getMessage());
                }
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø –±–µ–∑ —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç messageId
                InlineKeyboardButton reviewButton = new InlineKeyboardButton();
                reviewButton.setText("2Ô∏è‚É£ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úÖ");
                reviewButton.setCallbackData("no_message_available");
                rows.add(List.of(reviewButton));
            }
        }
        
        // –≠—Ç–∞–ø 3: –ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–µ—à–±–µ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω)
        if (purchase.getPurchaseStage() >= 3) {
            if (purchase.getCashbackMessageId() != null) {
                try {
                    ResourceBundle rb = ResourceBundle.getBundle("app");
                    String groupIdStr = rb.getString("tg.group");
                    
                    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "-100" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    String cleanGroupId = groupIdStr;
                    if (groupIdStr.startsWith("-100")) {
                        cleanGroupId = groupIdStr.substring(4);
                    } else if (groupIdStr.startsWith("100")) {
                        cleanGroupId = groupIdStr.substring(3);
                    }
                    
                    String cashbackUrl = "https://t.me/c/" + cleanGroupId + "/" + purchase.getCashbackMessageId();
                    
                    InlineKeyboardButton cashbackButton = new InlineKeyboardButton();
                    cashbackButton.setText("3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫ ‚úÖ");
                    cashbackButton.setUrl(cashbackUrl);
                    rows.add(List.of(cashbackButton));
                } catch (Exception e) {
                    System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–µ—à–±–µ–∫: " + e.getMessage());
                }
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø –±–µ–∑ —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç messageId
                InlineKeyboardButton cashbackButton = new InlineKeyboardButton();
                cashbackButton.setText("3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫ ‚úÖ");
                cashbackButton.setCallbackData("no_message_available");
                rows.add(List.of(cashbackButton));
            }
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º");
        backButton.setCallbackData("admin_back_to_purchases_" + purchase.getProduct().getIdProduct());
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        sent.sendMessage(admin, text, message);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    public void showStats(User admin) {
        PurchaseDAO purchaseDAO = new PurchaseDAO();
        ProductDAO productDAO = new ProductDAO();
        List<Purchase> allPurchases = purchaseDAO.findAll();
        List<Product> allProducts = productDAO.findAll();
        
        int totalPurchases = allPurchases.size();
        int totalProducts = allProducts.size();
        
        String text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n" +
                     "üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: " + totalProducts + "\n" +
                     "üõí –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: " + totalPurchases + "\n" +
                     "üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: " + 
                     allPurchases.stream().map(Purchase::getUser).distinct().count();
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
        backButton.setCallbackData("admin_back_to_menu");
        
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        sent.sendMessage(admin, text, message);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (edit message)
     */
    public void updateStats(User admin, int messageId) {
        PurchaseDAO purchaseDAO = new PurchaseDAO();
        ProductDAO productDAO = new ProductDAO();
        List<Purchase> allPurchases = purchaseDAO.findAll();
        List<Product> allProducts = productDAO.findAll();
        
        int totalPurchases = allPurchases.size();
        int totalProducts = allProducts.size();
        
        String text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n" +
                     "üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: " + totalProducts + "\n" +
                     "üõí –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: " + totalPurchases + "\n" +
                     "üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: " + 
                     allPurchases.stream().map(Purchase::getUser).distinct().count();
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
        backButton.setCallbackData("admin_back_to_menu");
        
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        Sent sent = new Sent();
        sent.editMessageMarkup(admin, messageId, text, null);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
     */
    public void showSettings(User admin) {
        AdminSettings settings = AdminSettings.getInstance();
        String supportMention = settings.getSupportMention();
        
        String text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n" +
                     "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: " + supportMention + "\n\n" +
                     "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:";
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"
        InlineKeyboardButton supportButton = new InlineKeyboardButton();
        supportButton.setText("üÜò –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É");
        supportButton.setCallbackData("admin_change_support");
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
        backButton.setCallbackData("admin_back_to_menu");
        
        rows.add(List.of(supportButton));
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        sent.sendMessage(admin, text, message);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞ (edit message)
     */
    public void updateSettings(User admin, int messageId) {
        AdminSettings settings = AdminSettings.getInstance();
        String supportMention = settings.getSupportMention();
        
        String text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n" +
                     "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: " + supportMention + "\n\n" +
                     "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:";
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"
        InlineKeyboardButton supportButton = new InlineKeyboardButton();
        supportButton.setText("üÜò –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É");
        supportButton.setCallbackData("admin_change_support");
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
        backButton.setCallbackData("admin_back_to_menu");
        
        rows.add(List.of(supportButton));
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        Sent sent = new Sent();
        sent.editMessageMarkup(admin, messageId, text, null);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–∫–∏
     */
    private String getPurchaseStageText(int stage) {
        return switch (stage) {
            case -1: yield "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞";
            case 0: yield "üõí –ó–∞–∫–∞–∑–∞–Ω";
            case 1: yield "üì¶ –ü–æ–ª—É—á–µ–Ω";
            case 2: yield "‚≠ê –û—Ç–∑—ã–≤ –æ—Å—Ç–∞–≤–ª–µ–Ω";
            case 3: yield "üí∏ –ö–µ—à–±–µ–∫ –∑–∞–ø—Ä–æ—à–µ–Ω";
            case 4: yield "‚úÖ –ö–µ—à–±–µ–∫ –≤—ã–ø–ª–∞—á–µ–Ω";
            default: yield "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (" + stage + ")";
        };
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
     */
    public void showAddProductMenu(User admin) {
        String text = "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n\n" +
                     "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:";
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
        backButton.setCallbackData("admin_back_to_menu");
        
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        sent.sendMessage(admin, text, message);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
     */
    public void showUserManagementMenu(User admin) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        UserDAO userDAO = new UserDAO();
        List<User> admins = userDAO.findAllAdmins();
        
        String text = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏:\n\n";
        
        if (admins.isEmpty()) {
            text += "‚ùå –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
        } else {
            text += "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n";
            for (int i = 0; i < admins.size(); i++) {
                User adminUser = admins.get(i);
                String username = adminUser.getUsername() != null ? "@" + adminUser.getUsername() : "–ë–µ–∑ username";
                text += (i + 1) + ". " + username + "\n";
            }
        }
        
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
        InlineKeyboardButton addAdminButton = new InlineKeyboardButton();
        addAdminButton.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞");
        addAdminButton.setCallbackData("admin_add_admin");
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é");
        backButton.setCallbackData("admin_back_to_admin_menu");
        
        rows.add(List.of(addAdminButton));
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        sent.sendMessage(admin, text, message);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
     */
    public void showEditProductMenu(User admin, int productId) {
        long startTime = System.currentTimeMillis();
        
        ProductDAO productDAO = new ProductDAO();
        long productLoadStart = System.currentTimeMillis();
        Product product = productDAO.findById(productId);
        long productLoadEnd = System.currentTimeMillis();
        System.out.println("‚è±Ô∏è Product loaded in " + (productLoadEnd - productLoadStart) + " ms");
        
        if (product == null) {
            Sent sent = new Sent();
            sent.sendMessage(admin, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }
        
        String text = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n" +
                     "üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: " + product.getProductName() + "\n" +
                     "üî¢ –ê—Ä—Ç–∏–∫—É–ª: " + product.getArticul() + "\n" +
                     "üí∞ –ö—ç—à–±—ç–∫: " + product.getCashbackPercentage() + "%\n" +
                     "üîç –ö–ª—é—á–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å: " + product.getKeyQuery() + "\n" +
                     "üìù –£—Å–ª–æ–≤–∏—è: " + product.getAdditional–°onditions() + "\n" +
                     "üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: " + (product.getPhoto() != null ? "–ó–∞–≥—Ä—É–∂–µ–Ω–∞" : "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞") + "\n" +
                     "üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å: " + (product.isVisible() ? "–í–∏–¥–∏–º—ã–π" : "–°–∫—Ä—ã—Ç—ã–π") + "\n\n" +
                     "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:";
        
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new java.util.ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        InlineKeyboardButton nameButton = new InlineKeyboardButton();
        nameButton.setText("üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ");
        nameButton.setCallbackData("admin_edit_product_name_" + productId);
        
        InlineKeyboardButton articulButton = new InlineKeyboardButton();
        articulButton.setText("üî¢ –ê—Ä—Ç–∏–∫—É–ª");
        articulButton.setCallbackData("admin_edit_product_articul_" + productId);
        
        InlineKeyboardButton cashbackButton = new InlineKeyboardButton();
        cashbackButton.setText("üí∞ –ö—ç—à–±—ç–∫");
        cashbackButton.setCallbackData("admin_edit_product_cashback_" + productId);
        
        InlineKeyboardButton queryButton = new InlineKeyboardButton();
        queryButton.setText("üîç –ö–ª—é—á–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å");
        queryButton.setCallbackData("admin_edit_product_query_" + productId);
        
        InlineKeyboardButton conditionsButton = new InlineKeyboardButton();
        conditionsButton.setText("üìù –£—Å–ª–æ–≤–∏—è");
        conditionsButton.setCallbackData("admin_edit_product_conditions_" + productId);
        
        InlineKeyboardButton photoButton = new InlineKeyboardButton();
        photoButton.setText("üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è");
        photoButton.setCallbackData("admin_edit_product_photo_" + productId);
        
        InlineKeyboardButton visibilityButton = new InlineKeyboardButton();
        visibilityButton.setText("üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å");
        visibilityButton.setCallbackData("admin_edit_product_visibility_" + productId);
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º");
        backButton.setCallbackData("admin_back_to_products");
        
        rows.add(List.of(nameButton));
        rows.add(List.of(articulButton));
        rows.add(List.of(cashbackButton));
        rows.add(List.of(queryButton));
        rows.add(List.of(conditionsButton));
        rows.add(List.of(photoButton));
        rows.add(List.of(visibilityButton));
        rows.add(List.of(backButton));
        
        keyboard.setKeyboard(rows);
        
        SendMessage message = new SendMessage();
        message.setReplyMarkup(keyboard);
        
        Sent sent = new Sent();
        sent.sendMessage(admin, text, message);
        
        long endTime = System.currentTimeMillis();
        System.out.println("‚è±Ô∏è showEditProductMenu completed in " + (endTime - startTime) + " ms");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Ä–∞–Ω–µ–µ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –µ–≥–æ
     */
    private boolean hasUserPurchasedProduct(Long userId, int productId) {
        try {
            System.out.println("üîç Checking purchases and reservations for user " + userId + " and product " + productId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            ReservationService reservationService = ReservationService.getInstance();
            User user = new User();
            user.setIdUser(userId);
            Product product = new Product();
            product.setIdProduct(productId);
            
            if (reservationService.isReservedByUser(user, product)) {
                System.out.println("üîç User " + userId + " has reserved product " + productId);
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏
            PurchaseDAO purchaseDAO = new PurchaseDAO();
            List<Purchase> userPurchases = purchaseDAO.findByUserId(userId);
            System.out.println("üîç Found " + userPurchases.size() + " purchases for user " + userId);
            
            for (Purchase purchase : userPurchases) {
                if (purchase.getProduct() != null && purchase.getProduct().getIdProduct() == productId) {
                    System.out.println("üîç User " + userId + " has purchased product " + productId);
                    return true;
                } else if (purchase.getProduct() == null) {
                    System.out.println("‚ö†Ô∏è Purchase " + purchase.getIdPurchase() + " has null product, skipping");
                }
            }
            System.out.println("üîç User " + userId + " has NOT purchased or reserved product " + productId);
            return false;
        } catch (Exception e) {
            System.err.println("‚ùå Error in hasUserPurchasedProduct: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
}
