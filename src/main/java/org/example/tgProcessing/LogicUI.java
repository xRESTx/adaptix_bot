package org.example.tgProcessing;

import org.example.dao.ProductDAO;
import org.example.dao.UserDAO;
import org.example.table.Product;
import org.example.table.User;
import org.example.telegramBots.TelegramBotLogs;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

public class LogicUI {

    public void sendStart(long chatId,Update update) {
        Sent sent = new Sent();
        TelegramBotLogs telegramBotLogs = new TelegramBotLogs();
        UserDAO userDAO = new UserDAO();

        User user = userDAO.findById(chatId);

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤");
        row1.add("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞");
        row2.add("–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫");

        KeyboardRow row3 = new KeyboardRow();
        if(user!=null && user.isAdmin()) {
            row3.add("–ê–¥–º–∏–Ω –º–µ–Ω—é");
        }
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1,row2,row3));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        SendMessage sendMessage = new SendMessage();

        sendMessage.setReplyMarkup(keyboardMarkup);

        if(user==null){
            user = new User();
            user.setIdUser(chatId);
            user.setAdmin(false);
            user.setBlock(false);
            user.setUserFlag(true);
            user.setUsername(update.getMessage().getFrom().getUserName());
            List<Long> messageIdAndGroup = telegramBotLogs.createTopic(update);
            user.setId_message(Math.toIntExact(messageIdAndGroup.getLast()));

            sent.sendMessageStart(user, user.getUsername() + ", –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç AdaptixBot", sendMessage);
            userDAO.save(user);
        }else{
            sent.sendMessage(user,user.getUsername() + ", —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", sendMessage);
        }
    }

    public void sendAdminMenu(User user, Integer messageId){
        Sent sent = new Sent();
        if(user.isAdmin()){
            if(messageId==null){
                SendMessage sendMessage = new SendMessage();
                Message sentMessage = sent.sendMessage(user,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ú–µ–Ω—é",sendMessage);
                messageId = sentMessage.getMessageId();
            }
            List<InlineKeyboardButton> row1 = new ArrayList<>();
            List<InlineKeyboardButton> row2 = new ArrayList<>();
            InlineKeyboardButton btnAddAdmin = new InlineKeyboardButton();
            btnAddAdmin.setText("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞");
            btnAddAdmin.setCallbackData("addAdmin:" + messageId);
            row1.add(btnAddAdmin);

            InlineKeyboardButton btnAddProduct = new InlineKeyboardButton();
            btnAddProduct.setText("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä");
            btnAddProduct.setCallbackData("addProduct:" + messageId);
            row1.add(btnAddProduct);

            InlineKeyboardButton btnIsAdmin= new InlineKeyboardButton();
            if(user.isUserFlag()){
                btnIsAdmin.setText("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
                btnIsAdmin.setCallbackData("isUser:" + messageId);
                row2.add(btnIsAdmin);
            }else {
                btnIsAdmin.setText("–ê–¥–º–∏–Ω");
                btnIsAdmin.setCallbackData("isUser:" + messageId);
                row2.add(btnIsAdmin);
            }
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            keyboard.add(row1);
            keyboard.add(row2);

            InlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup();
            inlineKeyboard.setKeyboard(keyboard);

            EditMessageReplyMarkup editMarkup = new EditMessageReplyMarkup();
            editMarkup.setChatId(user.getIdUser());
            editMarkup.setMessageId(messageId);
            editMarkup.setReplyMarkup(inlineKeyboard);

            sent.editMessageMarkup(user,messageId,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: –ê–¥–º–∏–Ω –º–µ–Ω—é",editMarkup);
        }
    }
    public void sendMenu(User user){
        Sent sent = new Sent();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤");
        row1.add("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞");
        row2.add("–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫");

        KeyboardRow row3 = new KeyboardRow();
        if(user!=null && user.isAdmin()) {
            row3.add("–ê–¥–º–∏–Ω –º–µ–Ω—é");
        }

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1,row2,row3));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        SendMessage sendMessage = new SendMessage();

        sendMessage.setReplyMarkup(keyboardMarkup);
        sent.sendMessageStart(user, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ú–µ–Ω—é", sendMessage);
    }

    public void sendProducts(User user, Integer messageId){
        Sent sent = new Sent();
        SendMessage sendMessage = new SendMessage();
        ProductDAO productDAO = new ProductDAO();

        List<Product> products = (user.isAdmin() && user.isUserFlag())
                ? productDAO.findAllVisible()
                : productDAO.findAll();
        if(products.isEmpty()){
            sent.sendMessage(user,"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –≤—ã–∫—É–ø –Ω–µ—Ç",sendMessage);
            return;
        }else if(messageId == null){
            messageId = sent.sendMessage(user,"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",sendMessage).getMessageId();
        }

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for(Product product : products){
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText("–¢–æ–≤–∞—Ä:" + product.getProductName() + "  " + product.getCashbackPercentage() + "%");
            button.setCallbackData("product_:" + product.getIdProduct() + ":" + messageId);
            rows.add(List.of(button));
        }
        if(user.isAdmin() && !user.isUserFlag()){
            InlineKeyboardButton btnAddProduct = new InlineKeyboardButton();
            btnAddProduct.setText("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä");
            btnAddProduct.setCallbackData("addProduct:" + messageId);
            rows.add(List.of(btnAddProduct));
        }
        InlineKeyboardButton back = new InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        back.setCallbackData("Exit:" + messageId);
        rows.add(List.of(back));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        EditMessageReplyMarkup editMarkup = new EditMessageReplyMarkup();
        editMarkup.setChatId(user.getIdUser());
        editMarkup.setMessageId(messageId);
        editMarkup.setReplyMarkup(markup);

        sent.editMessageMarkup(user, messageId, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", editMarkup);
    }
    public void sendMessageBank(User user, String text){
        Sent sent = new Sent();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–¢-–ë–∞–Ω–∫");
        row1.add("–°–±–µ—Ä");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        SendMessage sendMessage = new SendMessage();

        sendMessage.setReplyMarkup(keyboardMarkup);
        sent.sendMessageStart(user, text, sendMessage);
    }
    public void sentOneProduct(User user, Product selected, int messageId){
        Sent sent = new Sent();
        String textProduct =
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: "+ selected.getProductName() + " \n" +
                        "\n" +
                        "–ö–µ—à–±–µ–∫ " + selected.getCashbackPercentage() +  "% –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ \uD83D\uDE4F\n" +
                        "–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –°–±–µ—Ä–∞ (–†–æ—Å—Å–∏—è)\n" +
                        "\n" +
                        "–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:\n" +
                        "- –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @adaptix_focus \uD83D\uDE09\n" +
                        "- –í–∫–ª—é—á–∏—Ç–µ –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ (–º—ã –µ—ë –º–æ–∂–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å)\n" +
                        "- –ù–∞–π–¥–∏—Ç–µ –Ω–∞—à —Ç–æ–≤–∞—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É \""+ selected.getKeyQuery() +"\" \uD83D\uDD0E\n" +
                        "- –ó–∞–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É\n" +
                        "- –ó–∞–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä —Å –ü–í–ó –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –¥–Ω–µ–π\uD83D\uDC4D\n" +
                        "- –°–æ–≥–ª–∞—Å—É–π—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ\n" +
                        "- –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏)\n" +
                        "- –ö–µ—à–±–µ–∫ –í–´–ü–õ–ê–ß–ò–í–ê–ï–¢–°–Ø –í –ü–ù –ò –ü–¢\uD83D\uDCB3\n" +
                        "\n" +
                        "–í–∞–∂–Ω–æ:\n" +
                        "- –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π —Ä–∞–∑–¥–∞—á–µ –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏\n" +
                        "- –§–ò–û –≤ –∑–∞–∫–∞–∑–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã\uD83D\uDC64\n" +
                        "- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ—Ç–∑—ã–≤–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã\uD83D\uDCF8\n" +
                        "- –û—Ç–∑—ã–≤ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 3 –¥–Ω–µ–π –ø–æ—Å–ª–µ –∑–∞–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ü–í–ó \uD83D\uDCC5\n" +
                        "- –ñ–µ–ª–∞—é—â–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –ü–í–ó –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏ \uD83D\uDEAB";
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        if(messageId!=0){
            InlineKeyboardButton back = new InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
            back.setCallbackData("Exit:" + messageId);
            keyboard.add(List.of(back));
        }
        if(!user.isUserFlag() && user.isAdmin()){
            InlineKeyboardButton name = new InlineKeyboardButton("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ");
            name.setCallbackData("update_tariffs_name_" + selected.getIdProduct());

            InlineKeyboardButton description = new InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ");
            description.setCallbackData("update_tariffs_description_" + selected.getIdProduct());

            InlineKeyboardButton price = new InlineKeyboardButton("–°—Ç–æ–∏–º–æ—Å—Ç—å");
            price.setCallbackData("update_tariffs_price_" + selected.getIdProduct());

            InlineKeyboardButton term = new InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
            term.setCallbackData("update_tariffs_term_" + selected.getIdProduct());

            InlineKeyboardButton discount = new InlineKeyboardButton("–°–∫–∏–¥–∫–∞");
            discount.setCallbackData("update_tariffs_discount_" + selected.getIdProduct());

            InlineKeyboardButton visible;
            if(selected.isVisible()){
                visible = new InlineKeyboardButton("–í–∏–¥–∏–º ‚úÖ");
            }else{
                visible = new InlineKeyboardButton("–ù–µ–≤–∏–¥–∏–º Ô∏è‚ö†Ô∏è");
            }
            visible.setCallbackData("changeVisible_" + selected.getIdProduct());
            keyboard.add(Arrays.asList(name,description,price,term,discount,visible));
        } else {
            InlineKeyboardButton buy = new InlineKeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å");
            buy.setCallbackData("buy_product:" + selected.getIdProduct());
            keyboard.add(List.of(buy));
        }

        InlineKeyboardMarkup inlineMarkup = new InlineKeyboardMarkup();
        inlineMarkup.setKeyboard(keyboard);

        EditMessageReplyMarkup editMarkup = new EditMessageReplyMarkup();
        editMarkup.setChatId(String.valueOf(user.getIdUser()));
        editMarkup.setMessageId(messageId);
        editMarkup.setReplyMarkup(inlineMarkup);

        sent.editMessageMarkup(user, messageId, textProduct, editMarkup);
    }
    public void sentBack(User user, Consumer<User> UIFunction, String text, String buttonText){
        Sent sent = new Sent();
        KeyboardRow row1 = new KeyboardRow();
        row1.add(buttonText);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        SendMessage sendMessage = new SendMessage();

        sendMessage.setReplyMarkup(keyboardMarkup);

        sent.sendMessage(user,text, sendMessage);
    }
}
