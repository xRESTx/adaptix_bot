package org.example.monitoring;

import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Gauge;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Timer;
import io.micrometer.prometheus.PrometheusConfig;
import io.micrometer.prometheus.PrometheusMeterRegistry;
import org.example.async.AsyncService;
import org.example.database.DatabaseManager;
import org.example.redis.RedisManager;

import java.time.Duration;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –°–µ—Ä–≤–∏—Å –º–µ—Ç—Ä–∏–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è AdaptixBot.
 * 
 * –ü–†–û–ë–õ–ï–ú–ê –ö–û–¢–û–†–£–Æ –†–ï–®–ê–ï–ú:
 * - –ù–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
 * - –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–∑–∫–∏—Ö –º–µ—Å—Ç
 * - –ù–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * 
 * –†–ï–®–ï–ù–ò–ï:
 * - Micrometer + Prometheus –¥–ª—è –º–µ—Ç—Ä–∏–∫
 * - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
 * - –ê–ª–µ—Ä—Ç—ã –∏ –¥–∞—à–±–æ—Ä–¥—ã
 */
public class MetricsService {
    
    private static volatile MetricsService instance;
    private static volatile MeterRegistry meterRegistry;
    private static final Object lock = new Object();
    
    // –°—á–µ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    public Counter userMessagesCounter;
    public Counter adminActionsCounter;
    public Counter productCreationsCounter;
    public Counter purchaseRequestsCounter;
    public Counter photoUploadsCounter;
    public Counter errorsCounter;
    
    // –¢–∞–π–º–µ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    public Timer messageProcessingTimer;
    public Timer photoProcessingTimer;
    public Timer databaseOperationTimer;
    public Timer redisOperationTimer;
    
    // Gauges –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    public AtomicLong activeUsers = new AtomicLong(0);
    public AtomicLong activeSessions = new AtomicLong(0);
    public AtomicLong databaseConnections = new AtomicLong(0);
    public AtomicLong redisConnections = new AtomicLong(0);
    
    private MetricsService() {
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è Singleton
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MetricsService
     */
    public static MetricsService getInstance() {
        if (instance == null) {
            synchronized (lock) {
                if (instance == null) {
                    instance = new MetricsService();
                }
            }
        }
        return instance;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ MeterRegistry —Å Prometheus
     */
    public MeterRegistry getMeterRegistry() {
        if (meterRegistry == null) {
            synchronized (lock) {
                if (meterRegistry == null) {
                    meterRegistry = createMeterRegistry();
                    initializeMetrics();
                }
            }
        }
        return meterRegistry;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ MeterRegistry —Å Prometheus –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
     */
    private MeterRegistry createMeterRegistry() {
        PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);
        
        System.out.println("üöÄ Initializing Prometheus metrics...");
        System.out.println("üìä Metrics endpoint: /actuator/prometheus");
        
        return registry;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
     */
    private void initializeMetrics() {
        // –°—á–µ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        userMessagesCounter = Counter.builder("adaptix.user.messages")
            .description("Number of user messages")
            .register(meterRegistry);
            
        adminActionsCounter = Counter.builder("adaptix.admin.actions")
            .description("Number of admin actions")
            .register(meterRegistry);
            
        productCreationsCounter = Counter.builder("adaptix.products.created")
            .description("Number of products created")
            .register(meterRegistry);
            
        purchaseRequestsCounter = Counter.builder("adaptix.purchases.requests")
            .description("Number of purchase requests")
            .register(meterRegistry);
            
        photoUploadsCounter = Counter.builder("adaptix.photos.uploads")
            .description("Number of photos uploaded")
            .register(meterRegistry);
            
        errorsCounter = Counter.builder("adaptix.errors.total")
            .description("Total number of errors")
            .register(meterRegistry);
        
        // –¢–∞–π–º–µ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        messageProcessingTimer = Timer.builder("adaptix.processing.messages")
            .description("Message processing time")
            .register(meterRegistry);
            
        photoProcessingTimer = Timer.builder("adaptix.processing.photos")
            .description("Photo processing time")
            .register(meterRegistry);
            
        databaseOperationTimer = Timer.builder("adaptix.database.operations")
            .description("Database operations time")
            .register(meterRegistry);
            
        redisOperationTimer = Timer.builder("adaptix.redis.operations")
            .description("Redis operations time")
            .register(meterRegistry);
        
        // Gauges –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        Gauge.builder("adaptix.users.active", activeUsers, AtomicLong::get)
            .description("Number of active users")
            .register(meterRegistry);
            
        Gauge.builder("adaptix.sessions.active", activeSessions, AtomicLong::get)
            .description("Number of active sessions")
            .register(meterRegistry);
            
        Gauge.builder("adaptix.database.connections", databaseConnections, AtomicLong::get)
            .description("Number of database connections")
            .register(meterRegistry);
            
        Gauge.builder("adaptix.redis.connections", redisConnections, AtomicLong::get)
            .description("Number of Redis connections")
            .register(meterRegistry);
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        Gauge.builder("adaptix.system.uptime", this, MetricsService::getUptime)
            .description("System uptime in seconds")
            .register(meterRegistry);
        
        System.out.println("‚úÖ Metrics initialized");
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void recordUserMessage() {
        userMessagesCounter.increment();
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    public void recordAdminAction() {
        adminActionsCounter.increment();
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
     */
    public void recordProductCreation() {
        productCreationsCounter.increment();
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
     */
    public void recordPurchaseRequest() {
        purchaseRequestsCounter.increment();
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
     */
    public void recordPhotoUpload() {
        photoUploadsCounter.increment();
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏
     */
    public void recordError(String errorType) {
        errorsCounter.increment();
        Counter.builder("adaptix.errors.by_type")
            .tag("type", errorType)
            .description("Errors by type")
            .register(meterRegistry)
            .increment();
    }
    
    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    public Timer.Sample startMessageProcessing() {
        return Timer.start(meterRegistry);
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    public void stopMessageProcessing(Timer.Sample sample) {
        sample.stop(messageProcessingTimer);
    }
    
    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
     */
    public Timer.Sample startPhotoProcessing() {
        return Timer.start(meterRegistry);
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
     */
    public void stopPhotoProcessing(Timer.Sample sample) {
        sample.stop(photoProcessingTimer);
    }
    
    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
     */
    public Timer.Sample startDatabaseOperation() {
        return Timer.start(meterRegistry);
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
     */
    public void stopDatabaseOperation(Timer.Sample sample) {
        sample.stop(databaseOperationTimer);
    }
    
    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Redis
     */
    public Timer.Sample startRedisOperation() {
        return Timer.start(meterRegistry);
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Redis
     */
    public void stopRedisOperation(Timer.Sample sample) {
        sample.stop(redisOperationTimer);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public void updateActiveUsers(long count) {
        activeUsers.set(count);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
     */
    public void updateActiveSessions(long count) {
        activeSessions.set(count);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
     */
    public void updateDatabaseConnections(long count) {
        databaseConnections.set(count);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å Redis
     */
    public void updateRedisConnections(long count) {
        redisConnections.set(count);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
     */
    public double getUptime() {
        return (System.currentTimeMillis() - startTime) / 1000.0;
    }
    
    private static final long startTime = System.currentTimeMillis();
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ Prometheus –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞
     */
    public String getPrometheusMetrics() {
        if (meterRegistry == null) {
            return "# –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n";
        }
        return ((PrometheusMeterRegistry) meterRegistry).scrape();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫
     */
    public String getMetricsSummary() {
        if (userMessagesCounter == null) {
            return "üìä –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã";
        }
        
        return String.format(
            "üìä –ú–µ—Ç—Ä–∏–∫–∏ AdaptixBot:\n" +
            "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n" +
            "‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤: %d\n" +
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: %d\n" +
            "‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –ø–æ–∫—É–ø–æ–∫: %d\n" +
            "‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: %d\n" +
            "‚Ä¢ –û—à–∏–±–∫–∏: %d\n" +
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: %d\n" +
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: %d\n" +
            "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %.1f —Å–µ–∫",
            (long) userMessagesCounter.count(),
            (long) adminActionsCounter.count(),
            (long) productCreationsCounter.count(),
            (long) purchaseRequestsCounter.count(),
            (long) photoUploadsCounter.count(),
            (long) errorsCounter.count(),
            activeUsers.get(),
            activeSessions.get(),
            getUptime()
        );
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    public void updateSystemMetrics() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        updateDatabaseConnections(DatabaseManager.getInstance().isHealthy() ? 1 : 0);
        updateRedisConnections(RedisManager.getInstance().isHealthy() ? 1 : 0);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–µ—Å—Å–∏–π
        // updateActiveUsers(getActiveUsersCount());
        // updateActiveSessions(getActiveSessionsCount());
    }
}
