package org.example.session;

import org.example.dao.ProductDAO;
import org.example.table.Product;
import org.example.table.User;

import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤
 */
public class ReservationService {
    
    private static final ReservationService instance = new ReservationService();
    private final ConcurrentHashMap<String, Reservation> reservations = new ConcurrentHashMap<>();
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(2);
    
    private ReservationService() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        scheduler.scheduleAtFixedRate(this::cleanupExpiredReservations, 5, 5, TimeUnit.MINUTES);
    }
    
    public static ReservationService getInstance() {
        return instance;
    }
    
    /**
     * –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    public boolean reserveProduct(User user, Product product) {
        String key = user.getIdUser() + "_" + product.getIdProduct();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if (reservations.containsKey(key)) {
            return false; // –£–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
        if (!product.hasAvailableSlots()) {
            return false; // –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        ProductDAO productDAO = new ProductDAO();
        boolean success = ReservationManager.incrementProductParticipants(product.getIdProduct());
        
        if (success) {
            // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω—å
            Reservation reservation = new Reservation(user, product, LocalDateTime.now());
            reservations.put(key, reservation);
            
            System.out.println("‚úÖ Product " + product.getIdProduct() + " reserved for user " + user.getIdUser());
            return true;
        }
        
        return false;
    }
    
    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å —Ç–æ–≤–∞—Ä–∞
     */
    public boolean cancelReservation(User user, Product product) {
        String key = user.getIdUser() + "_" + product.getIdProduct();
        Reservation reservation = reservations.remove(key);
        
        if (reservation != null) {
            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            ReservationManager.decrementProductParticipants(product.getIdProduct());
            
            System.out.println("‚ùå Reservation cancelled for user " + user.getIdUser() + ", product " + product.getIdProduct());
            return true;
        }
        
        return false;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–æ–≤–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    public boolean isReservedByUser(User user, Product product) {
        String key = user.getIdUser() + "_" + product.getIdProduct();
        return reservations.containsKey(key);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public LocalDateTime getReservationTime(User user, Product product) {
        String key = user.getIdUser() + "_" + product.getIdProduct();
        Reservation reservation = reservations.get(key);
        return reservation != null ? reservation.getReservedAt() : null;
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π (—Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç)
     */
    private void cleanupExpiredReservations() {
        LocalDateTime cutoffTime = LocalDateTime.now().minusMinutes(30);
        
        reservations.entrySet().removeIf(entry -> {
            Reservation reservation = entry.getValue();
            if (reservation.getReservedAt().isBefore(cutoffTime)) {
                // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                ReservationManager.decrementProductParticipants(reservation.getProduct().getIdProduct());
                
                System.out.println("üïê Auto-cancelled expired reservation for user " + 
                    reservation.getUser().getIdUser() + ", product " + reservation.getProduct().getIdProduct());
                return true;
            }
            return false;
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π
     */
    public int getActiveReservationsCount() {
        return reservations.size();
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å
     */
    public void shutdown() {
        scheduler.shutdown();
        try {
            if (!scheduler.awaitTermination(30, TimeUnit.SECONDS)) {
                scheduler.shutdownNow();
            }
        } catch (InterruptedException e) {
            scheduler.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
     */
    private static class Reservation {
        private final User user;
        private final Product product;
        private final LocalDateTime reservedAt;
        
        public Reservation(User user, Product product, LocalDateTime reservedAt) {
            this.user = user;
            this.product = product;
            this.reservedAt = reservedAt;
        }
        
        public User getUser() { return user; }
        public Product getProduct() { return product; }
        public LocalDateTime getReservedAt() { return reservedAt; }
    }
}
